<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>integration testing on </title>
    <link>/tags/integration-testing/</link>
    <description>Recent content in integration testing on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Sep 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/integration-testing/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Returning multiple fake objects with FakeItEasy</title>
      <link>/2013-09-20-returning-multiple-fake-objects-with-fakeiteasy/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-09-20-returning-multiple-fake-objects-with-fakeiteasy/</guid>
      <description>&lt;p&gt;I was recently writing some unit tests where I needed to test that multiple calls to an interface returned different objects.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://github.com/FakeItEasy/FakeItEasy&#34;&gt;FakeItEasy&lt;/a&gt; this is easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A.CallTo(() =&amp;gt; myInterface.GetSomething(1)).Returns(new Something())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All very nice, but now if I have multiple calls to &lt;code&gt;myInterface&lt;/code&gt; I have to execute the above statement &amp;lsquo;x&amp;rsquo; amount of times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Fact]
public void Should_Do_Something()
{
  var myInterface = A.Fake&amp;lt;IApplication&amp;gt;();
  A.CallTo(() =&amp;gt; myInterface.GetSomething(1)).Returns(new Something());
  A.CallTo(() =&amp;gt; myInterface.GetSomething(2)).Returns(new Something());
  A.CallTo(() =&amp;gt; myInterface.GetSomething(3)).Returns(new Something());
  
  var result = sut.DoSomething(myInterface);
  
  Assert.Equal(&amp;quot;Super Duper&amp;quot;, result);
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Enabling CORS in IISExpress</title>
      <link>/2013-09-16-enabling-cors-in-iisexpress/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-09-16-enabling-cors-in-iisexpress/</guid>
      <description>I was playing around with swagger-ui and was trying to point it to a local endpoint that I started with IIS Express. I was getting an error saying that it needed the endpoint to accept Access-Control-Allow-Origin requests.
I went Googling and it couldn&amp;rsquo;t find anything specific to IIS Express but managed to use some guidance for full blown IIS.
The solution is to go to C:\Program Files (x86)\IIS Express\AppServer and open the applicationhost.</description>
    </item>
    
    <item>
      <title>Keeping SQL Data Organised in Integration Tests</title>
      <link>/2013-09-12-keeping-sql-data-organised-in-integration-tests/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-09-12-keeping-sql-data-organised-in-integration-tests/</guid>
      <description>&lt;p&gt;In my latest project I had kept my solution tidy with my main app project, my unit test project and integration test project. I tend to stick with a naming convention such as MainApp, MainApp.Tests.Unit &amp;amp; MainApp.Tests.Integration.&lt;/p&gt;
&lt;p&gt;I had begun writing my integration tests for a repository that hits the database and returns data. Currently it was one method being called in the repository.  &lt;a href=&#34;http://xunit.codeplex.com/&#34;&gt;xUnit&lt;/a&gt; allows you to setup any test dependencies in the constructor of your test class.  It also allows you to do any tidying up in a Dispose method if you implement IDisposable although this is &lt;a href=&#34;http://xunit.codeplex.com/wikipage?title=Comparisons&amp;amp;referringTitle=Home#note2&#34;&gt;frowned upon&lt;/a&gt;.  However I felt for my needs I would implement this.&lt;/p&gt;
&lt;p&gt;I  was creating data in the database in the constructor which will get called before the test runs, retrieving data in the test, asserting and then deleting all data and resetting the auto-incrementing from the tables in the Dispose method.&lt;/p&gt;
&lt;p&gt;This was working perfectly until I wanted to test another method on my repository.&lt;/p&gt;
&lt;p&gt;I now needed to add data for my new method but realised if I added different data to the database in the constructor, I would be creating unnecessary data unrelated to the test.&lt;/p&gt;
&lt;p&gt;My options were to move the constructor logic into separate methods and then call the methods in the test or have separate test classes per method in the repo.  Both were a not an ideal solution and quite frankly verbose, ugly and not best practice.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>