<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nuget on </title>
    <link>/tags/nuget/</link>
    <description>Recent content in nuget on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 07 Dec 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/nuget/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Easily publish a NuGet package</title>
      <link>/2012-12-07-easily-publish-a-nuget-package/</link>
      <pubDate>Fri, 07 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-12-07-easily-publish-a-nuget-package/</guid>
      <description>&lt;p&gt;I recently published &lt;a href=&#34;http://blog.jonathanchannon.com/2012/11/29/asp-net-web-api-testing/&#34; title=&#34;ASP.NET Web API Testing&#34;&gt;WebAPI.Testing&lt;/a&gt; on &lt;a href=&#34;http://nuget.org/packages/WebAPI.Testing&#34;&gt;Nuget&lt;/a&gt; but found it a bit tricky to build a package ready for NuGet.&lt;/p&gt;
&lt;p&gt;There is &lt;a href=&#34;http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package&#34;&gt;documentation &lt;/a&gt;about how to do it but I found it hard to follow so I thought Iâ€™d document how I finally got my package ready.&lt;/p&gt;
&lt;p&gt;The easiest way I thought was to have something built into Visual Studio. I spoke to &lt;a href=&#34;https://twitter.com/davidfowl&#34;&gt;David Fowler&lt;/a&gt; and he told me you can edit your *.csproj file and add &lt;code&gt;&amp;lt;BuildPackage&amp;gt;true&amp;lt;/BuildPackage&amp;gt;&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;When you build your project a *.nupkg is created ready for publishing with NuGet.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>