<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nancyfx on </title>
    <link>/tags/nancyfx/</link>
    <description>Recent content in nancyfx on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 30 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/nancyfx/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VQ Communications Funds NancyFX to run on CoreCLR</title>
      <link>/2016-03-30-vq-communications-funds-coreclr-nancyfx/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016-03-30-vq-communications-funds-coreclr-nancyfx/</guid>
      <description>&lt;p&gt;Nearly 2 years ago I was employed by &lt;a href=&#34;http://www.vqcomms.com&#34;&gt;VQ Communications&lt;/a&gt; primarily because of my open source contributions to &lt;a href=&#34;http://nancyfx.org&#34;&gt;NancyFX&lt;/a&gt;.  They had started work on a v2 of their flagship product and had begun work with Nancy and needed someone to help drive a HTTP API and architect a scaling solution as their v2 product was addressing a requirement they had for it cope with large volumes of traffic.  Also of interest to me was their aim to deliver all of this as a black box appliance to customers on a VM running a custom embedded version of Linux using Postgres as the database.  I would work four days a week remotely and go into the office one day a week.  They already had completely remote employees and since I have been there they have taken on more. There are lots more juicy technical examples in the stack I could go into however, this is not the point of this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Negotiator  - a GoLang content negotiation library</title>
      <link>/2015-11-16-content-negotiation-golang/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015-11-16-content-negotiation-golang/</guid>
      <description>&lt;p&gt;In my continued experience learning GoLang I started looking at how to best use it when dealing with HTTP.  The idiomatic way to use GoLang and HTTP is to use the standard library which keeps things minimal but there are a few features missing.  The first thing is a router.  OOTB GoLang doesn&amp;rsquo;t have a router and the majority seem to suggest using a package called Mux from Gorilla Toolkit, a set of libraries that aims to improve the standard library from Go.  After having a play with it I didn&amp;rsquo;t really warm to it so spent some time looking into the alternatives (and there are plenty!) and eventually decided upon &lt;a href=&#34;https://goji.io&#34;&gt;Goji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once I had started using Goji I then wanted to handle content negotiation in my HTTP handler.  As I said earlier GoLang is minimal in its offerings OOTB and this is a good thing.  Just for the record there are a few frameworks out there if you want/need and all encompassing framework such as Martini, Revel and Echo.  These tend to bend the idioms  of GoLang a bit and even the author of Martini blogged on this fact due to feedback from the community that although its capabilities are great they aren&amp;rsquo;t idiomatic Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NancyFX and Hypermedia</title>
      <link>/2015-08-07-hypermedia-and-nancyfx/</link>
      <pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015-08-07-hypermedia-and-nancyfx/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been slowly educating my self on hypermedia; what it is, how does it help and how to use it.  I must say I&amp;rsquo;ve found it a very interesting topic and I thought it was time I put some information into a blog post just in case the 2 people that read this blog might find it useful.&lt;/p&gt;
&lt;p&gt;In my day job I&amp;rsquo;m responsible for a HTTP API (notice I didn&amp;rsquo;t use REST) and some months ago I spoke to Glenn Block around a general discussion about hypermedia.  Glenn put this on YouTube if you want to watch it.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Cookie Authentication &amp; CRSF with AngularJs, Owin &amp; Mono</title>
      <link>/2015-04-27-cookie-authentication-angularjs-csrf-owin-mono/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015-04-27-cookie-authentication-angularjs-csrf-owin-mono/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently working on a project that has &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt; serving up an API.  For the UI there is AngularJS.  We were using JWT for authentication just to get us up and running but then as things became more final in the product we knew it would be better to swap to cookies for security plus we may as well leverage the browser capabilities  for cookie handling. I&amp;rsquo;m not going to get into the arguments about JWT security vs cookie security, there are advantages/disadvantages for using both in this scenario.  Our API is built on top of OWIN and Microsoft provide cookie middleware so I thought this would be nice and simple to plug in.  Lets just remember I&amp;rsquo;m working on Mono!&lt;/p&gt;
&lt;p&gt;In our Startup class I added the below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationMode = AuthenticationMode.Active,
    CookieHttpOnly = true,
    CookieSecure = Microsoft.Owin.Security.Cookies.CookieSecureOption.SameAsRequest,
    SlidingExpiration = true,
    AuthenticationType = &amp;quot;MyCookie&amp;quot;,
    CookieName = &amp;quot;MyCookie&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully thats pretty self explanatory. So I fired up my application and BOOM!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nancy, ASP.Net vNext, OSX and Sublime Text</title>
      <link>/2014-08-05-nancy-aspnetvnext-osx-sublime-text/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014-08-05-nancy-aspnetvnext-osx-sublime-text/</guid>
      <description>&lt;p&gt;One of the great things that ASP.Net vNext is bringing is the ability to use it cross platform with Microsoft actively testing their libraries against &lt;a href=&#34;http://www.mono-project.com/Main_Page&#34;&gt;Mono&lt;/a&gt;.  Along with this MS are developing a web server that is cross platform and goes by the name of &lt;a href=&#34;https://github.com/aspnet/KestrelHttpServer&#34;&gt;Kestrel&lt;/a&gt;.  One thing they aren&amp;rsquo;t doing, yet, is making Visual Studio cross platform so we need something to write our code in.  There a few editors out there but one of the most common is &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;Sublime Text&lt;/a&gt;.  This gives you syntax highlighting and build systems that can all be configured so if you are not aware of it check it out.  Obviously before we can start writing code on OSX with our editor we need Mono installed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE - As of August 13th 2014 there is a Mono 3.6 release which means you no longer need to compile Mono but you will need to install Homebrew for ASP.Net vNext. &lt;a href=&#34;#vnext&#34;&gt;Skip to nnext section&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the time of writing the official binary for Mono is 3.4.0 and this does not include some features needed for ASP.Net vNext to run so we are going to have to manually compile Mono ourselves.  Now I know this sounds scary but its not as bad as it seems and I&amp;rsquo;ve gone through the pain of setting it up so hopefully this blog post should make it easier for you&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&#34;http://mono-project.com/Compiling_Mono_on_OSX&#34;&gt;guide&lt;/a&gt; on Mono&amp;rsquo;s website on how to compile but I found some issues with it.  I&amp;rsquo;m running on OSX Mavericks so I&amp;rsquo;m not sure if that resulted in issues but here&amp;rsquo;s my guide to get it compiling.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nancy, ASP.Net vNext, VS2014 &amp; Azure</title>
      <link>/2014-06-14-nancy-aspnet-vnext-vs2014-azure/</link>
      <pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014-06-14-nancy-aspnet-vnext-vs2014-azure/</guid>
      <description>&lt;p&gt;By now we know of Microsoft&amp;rsquo;s plans for the next version of ASP.Net and they&amp;rsquo;ve turned it on its head and from the looks of it, its goooooood!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx&#34;&gt;Here&lt;/a&gt; is a blog post from Scott Hanselman introducing ASP.Net vNext. There are introductory and deep dive videos available for your perusal which are also well worth a watch.&lt;/p&gt;
&lt;p&gt;The TL;DR is ASP.Net vNext will take heavy influence from Node.js by using Owin to wire up all the app dependencies and middleware.  It will also remove *.csproj files and use a project.json file similar to Node&amp;rsquo;s package.json and use NuGet to reference the application&amp;rsquo;s dependencies.  It also takes inspiration from Node and Nancy&amp;rsquo;s approach requiring you to opt-in to dependencies rather that traditionally having everything but the kitchen sink.  It also takes influence from Nancy via built in dependency injection and Mono support.  Microsoft announced they will run all their vNext tests against Mono builds ensuring all their code is compatible for cross platform deployments.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a tweet direct from the horses mouth albeit with a typo .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/XMmMDce.png&#34; alt=&#34;vNext influenced by Node/Nancy&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Owin.StatelessAuth with Nancy/Angular demo</title>
      <link>/2014-05-07-introducing-owin-statelessauth-with-nancy-angular-demo/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014-05-07-introducing-owin-statelessauth-with-nancy-angular-demo/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re writing an API, current thinking is to provide a token in the &lt;code&gt;Authorization&lt;/code&gt; header for your app to validate when the request comes in.  I have used the &lt;a href=&#34;http://www.nuget.org/packages/Nancy.Authentication.Stateless/&#34;&gt;Nancy.Authentication.Stateless&lt;/a&gt; package in the past for my APIs and even have a demo of it &lt;a href=&#34;https://github.com/jchannon/Nancy.Demo.StatelessAuth&#34;&gt;here&lt;/a&gt; if you&amp;rsquo;re interested (there are more Nancy demos at &lt;a href=&#34;http://samples.nancyfx.org/&#34;&gt;http://samples.nancyfx.org&lt;/a&gt;). This is a great package and does a great job but what if one day you want to use &lt;a href=&#34;http://www.asp.net/signalr&#34;&gt;SignalR&lt;/a&gt; v2 that uses &lt;a href=&#34;http://owin.org/&#34;&gt;OWIN&lt;/a&gt; and you want to validate not just requests to your Nancy app but also the SignalR requests?  You&amp;rsquo;re going to need to validate requests as they come in before they get to SignalR or Nancy.&lt;/p&gt;
&lt;p&gt;For those of you who are not quite up to date or unsure what OWIN is let me try and give you the tl:dr, no doubt others may say its something slightly different.  Imagine you are asked to create a ASP.Net MVC 3 app (ignore the fact that that person needs a slap) so you fire up Visual Studio and create the app.  So what has it done? Its created an app that runs on IIS and all requests come straight into your app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blogging with Markdown &amp; Deploying via Git - Introducing Sandra.Snow</title>
      <link>/2013-10-01-blogging-with-markdown-and-git/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-10-01-blogging-with-markdown-and-git/</guid>
      <description>&lt;p&gt;There are many markdown blogging engines out there such as &lt;a href=&#34;http://calepin.co/&#34;&gt;Calepin&lt;/a&gt;, &lt;a href=&#34;http://scriptogr.am/&#34;&gt;Scriptogram&lt;/a&gt; and even &lt;a href=&#34;http://wordpress.org/&#34;&gt;WordPress&lt;/a&gt; allows you to write blog posts in Markdown but &lt;a href=&#34;https://github.com/Sandra/Sandra.Snow&#34;&gt;Sandra.Snow&lt;/a&gt; tries to add something different.  Firstly, it is written in .Net and &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt;, secondly its a static blog generator and finally it supports Git deployment.&lt;/p&gt;
&lt;p&gt;Even if you don&amp;rsquo;t want to use Git deployment you can use FTP, its a great tool.  To write your blog post in Markdown you need a custom header in your file so it knows some information about your post.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
category: Azure
title: Setting up a ServiceStack Service
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It then parses this information along with your Markdown into its engine, uses a Markdown view engine to convert the file content into HTML, assign model properties based on the header and creates a HTML file using the model via a Razor viewengine.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;layout&amp;rdquo; refers to the Razor file it uses to render the final HTML file.  This allows you to style your pages and blog posts whichever way you&amp;rsquo;d prefer.  These &amp;ldquo;layout&amp;rdquo; files should exist in the &amp;ldquo;_layouts&amp;rdquo; folder for your site template.  The site template is a set of files and folders that Sandra.Snow uses to produce the final static website.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;category&amp;rdquo; or &amp;ldquo;categories&amp;rdquo; property, you can use both for singular or multiple comma-seperated values that refer to the category/categories of your blog post.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;title&amp;rdquo; should hopefully be self explanatory!&lt;/p&gt;
&lt;p&gt;You can optionally add an author and email properties to override the global config settings for example, if you wanted to allow guest author blog posts.  There is also an optional metadescription property you can use for SEO.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Async Route Handling with Nancy</title>
      <link>/2013-08-24-async-route-handling-with-nancy/</link>
      <pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-08-24-async-route-handling-with-nancy/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t know about you but all I hear is &amp;ldquo;ASYNC ALL THE THINGS!&amp;quot;, I think this is partly down to its new and shiny and us developers love &amp;ldquo;the shiny&amp;rdquo; and partly a lot of the things we do in our applications are I/O based whether that be database or file system.&lt;/p&gt;
&lt;p&gt;The problem that comes with the new and shiny bandwagon is you need to understand what you&amp;rsquo;re evangelising. Making asynchronous methods and executing them with no actual reason will not give your codebase any gains and could actually effect your application&amp;rsquo;s performance.  There is more depth to that argument but for simplicity just remember this, only use asynchronous methods if you are doing some sort of I/O.&lt;/p&gt;
&lt;p&gt;It could also be argued that only &amp;ldquo;use asynchronicity in a web framework if you expect high traffic in your web application&amp;rdquo;. If you only have 10 requests on a small site you&amp;rsquo;re not going to benefit from asynchronous execution as there are plenty of threads available to handle your application.  If you start hitting 1000 concurrent requests (the default IIS limit) then requests will start getting queued up.  If you make your routes asynchronous then any code that is being waited on, the thread that is being used there can be released to process another request thus speeding up the performance of your app and prevent the likely hood of large queues.  I will show how simple it is to make your routes asynchronous with Nancy below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mocking HttpContext with Fake It Easy</title>
      <link>/2013-04-30-mocking-httpcontext-with-fake-it-easy/</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-04-30-mocking-httpcontext-with-fake-it-easy/</guid>
      <description>&lt;p&gt;Lets start with the conclusion first and say “use &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt; for your web applications and APIs” as its brilliant!&lt;/p&gt;
&lt;p&gt;If you want to continue reading lets crack on.&lt;/p&gt;
&lt;p&gt;I’m currently working on a ASP.Net MVC project and one of the controller methods writes directly to the Response, &lt;em&gt;eg. Response.Write(“How will I mock thee?”);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having moved over to &lt;a href=&#34;http://xunit.codeplex.com/&#34;&gt;xUnit&lt;/a&gt; and &lt;a href=&#34;https://github.com/FakeItEasy/FakeItEasy&#34;&gt;FakeItEasy&lt;/a&gt; recently I wanted to write a unit or integration test depending how you see it to assert against the Http Response.&lt;/p&gt;
&lt;p&gt;Doing this is no easy feat with MVC (with Nancy its all &lt;a href=&#34;https://github.com/NancyFx/Nancy/wiki/Testing-your-application&#34;&gt;done for you&lt;/a&gt;) and you have to mock a lot of things. I’m hoping that in later releases this will be fixed because I know that ASP.Net Web API has made things a bit easier for testing (and wrote a testing library for it) so I assume the two projects will use bits of each other or their roadmap will merge.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using a Markdown ViewEngine with Nancy</title>
      <link>/2013-04-08-using-a-markdown-viewengine-with-nancy/</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-04-08-using-a-markdown-viewengine-with-nancy/</guid>
      <description>&lt;p&gt;Whilst using &lt;a href=&#34;http://stackoverflow.com&#34;&gt;stackoverflow.com&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/&#34;&gt;Github gists&lt;/a&gt; I’ve become a frequent user of &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you that don’t know what Markdown is, its essentially a shorter/cleaner syntax that can be parsed to produce HTML. Below are a few examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Hello World!
##You&#39;re awesome!
The quick brown fox jumped over the lazy coder
What the **hell** is this?
This is an [example link](http://example.com/)

&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;You&#39;re awesome!&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The quick brown fox jumped over the lazy coder&amp;lt;/p&amp;gt;
What the &amp;lt;strong&amp;gt;hell&amp;lt;/strong&amp;gt; is this?
This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt; example link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see more examples in the earlier link.&lt;/p&gt;
&lt;p&gt;When you’re writing a blog post or a lengthy page in your web app with lots of HTML it maybe easier to use Markdown as your preferred syntax. I currently use WordPress for my blog, it’s ok but its quite bloated for probably what I need. I looked into &lt;a href=&#34;http://calepin.co/&#34;&gt;Calepin&lt;/a&gt; and &lt;a href=&#34;http://scriptogr.am/&#34;&gt;Scriptogr.am&lt;/a&gt; as alternative blogging platforms but I felt it didn’t quite offer what I wanted but the approach was a good idea. It meant you could write a blog post and simply put the file in dropbox and it would appear on your blog.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why use NancyFX?</title>
      <link>/2012-12-19-why-use-nancyfx/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-12-19-why-use-nancyfx/</guid>
      <description>&lt;p&gt;When a new project comes along why should you automatically choose ASP.NET MVC? Yes, its Microsoft based so you may have more of your peers fluent already in that architecture but is there an alternative, a better alternative?&lt;/p&gt;
&lt;p&gt;I believe so and its called &lt;a href=&#34;http://nancyfx.org/&#34;&gt;NancyFX&lt;/a&gt;. Your first reaction, what is so special about Nancy? I also believe you’ll ask what is wrong with ASP.NET MVC but maybe you should look at it differently and ask what is right with Nancy?&lt;/p&gt;
&lt;h2 id=&#34;what-is-nancy&#34;&gt;What is Nancy?&lt;/h2&gt;
&lt;p&gt;Nancy is a lightweight framework for building websites / services without getting in your way. It’s heavily inspired by a Ruby project called Sinatra, which happens to identify itself as not being a framework, since it doesn’t include all the plumbing of things such as an ORM, lots of configuration, etc.&lt;/p&gt;
&lt;h2 id=&#34;does-it-implement-mvc&#34;&gt;Does it implement MVC?&lt;/h2&gt;
&lt;p&gt;Nancy does not force you to adhere to the model-view-controller pattern, or any other pattern. It’s nothing more than a service endpoint responding to HTTP verbs. Making it ideal for building Websites, Web Services and APIs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET Web API Testing</title>
      <link>/2012-11-29-asp-net-web-api-testing/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-11-29-asp-net-web-api-testing/</guid>
      <description>&lt;p&gt;As the need arose to implement some kind of Web Service/HTTP API I thought I would evaluate &lt;a href=&#34;http://nancyfx.org/&#34;&gt;NancyFX&lt;/a&gt;, &lt;a href=&#34;http://www.asp.net/web-api&#34;&gt;ASP.NET Web API&lt;/a&gt; and &lt;a href=&#34;http://www.servicestack.net/&#34;&gt;ServiceStack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suffice to say all performed as expected and I was actually surprised to find that implementing ASP.NET Web API was easier than ServiceStack (I know that might be a bit of a statement to make to the ServiceStack followers, sorry). I found Nancy easiest to implement. The very simple API demos can be found on &lt;a href=&#34;http://github.com/jchannon&#34;&gt;my Github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When it came to testing ASP.NET Web API I found it to be wanting slightly in comparison to Nancy. With WebAPI I could make direct calls to the controller methods to make sure data was returned correctly and I could mock a repository and test that the methods in the repository were being called but there was nothing I could see to test the HTTP response I would get.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple .Net Twitter,Google,Facebook Authentication</title>
      <link>/2012-10-25-simple-net-twittergooglefacebook-authentication/</link>
      <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-10-25-simple-net-twittergooglefacebook-authentication/</guid>
      <description>&lt;p&gt;Logging into websites is no longer a matter of typing in your username and password and clicking the login button. If you already have an account with the main social networks you can log into a site using your credentials from that website saving you having to register your details &lt;em&gt;again&lt;/em&gt;. This obviously makes things a bit easier as you don’t have to remember another password. (Although you should all be using a password manager such as &lt;a href=&#34;http://www.lastpass.com&#34;&gt;LastPass&lt;/a&gt;.)&lt;/p&gt;
&lt;h2 id=&#34;current-social-login-providers&#34;&gt;Current Social Login Providers&lt;/h2&gt;
&lt;p&gt;There are currently providers out there that allow you to use their services to integrate into your website to provide authentication via the social networks. The main two that I know of are &lt;a href=&#34;http://janrain.com&#34;&gt;Janrain&lt;/a&gt; and &lt;a href=&#34;http://www.dotnetopenauth.net/&#34;&gt;DotNetOpenAuth&lt;/a&gt;. I’ve not worked with DotNetOpenAuth but I have with Janrain when building &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me/&#34;&gt;DinnerParty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The process was reasonably easy but not as simple as it could be.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NancyFX, RavenDB, NerdDinner and Me</title>
      <link>/2012-09-21-nancyfx-ravendb-nerddinner-and-me/</link>
      <pubDate>Fri, 21 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-09-21-nancyfx-ravendb-nerddinner-and-me/</guid>
      <description>&lt;p&gt;As I said in my &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/17/ive-started-blogging-why/&#34; title=&#34;I’ve started blogging. Why?&#34;&gt;first post&lt;/a&gt;, NancyFX was my first port of call in my OSS adventure.  The reason I had come across it was by following &lt;a href=&#34;http://twitter.com/squidge&#34;&gt;@squidge&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/cranialstrain&#34;&gt;@cranialstrain&lt;/a&gt; on Twitter.  At the time they were talking about it quite a bit so I thought I’d take a look.  I was also keeping track of lots of people talking about &lt;a href=&#34;http://ravendb.net&#34;&gt;RavenDB&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-is-nancyfx&#34;&gt;What is NancyFX?&lt;/h3&gt;
&lt;p&gt;From the official docs this explains NancyFX:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This means that everything in Nancy is setup to have sensible defaults and conventions, instead of making you jump through hoops and go through configuration hell just to get up and running. With Nancy you can go from zero to website in a matter of minutes. Literally.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I’ve started blogging. Why?</title>
      <link>/2012-09-17-ive-started-blogging-why/</link>
      <pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-09-17-ive-started-blogging-why/</guid>
      <description>&lt;p&gt;So here I am, Jonathan Channon, blogger.  I never saw the point of blogging before so why now?&lt;/p&gt;
&lt;p&gt;I have read and spoken to many people regarding blogging who were all in favour of it.  I would always argue that I don’t have time, I have nothing to blog about or I’m not that insane to start blogging about stuff I barely understand just so the masses can come and hurl abuse at my ignorance.  However I recently read an &lt;a href=&#34;http://buildstarted.com/2012/08/28/how-i-learned-to-stop-worrying-and-love-my-community/&#34;&gt;article&lt;/a&gt; by &lt;a href=&#34;http://twitter.com/buildstarted&#34;&gt;Ben Dornis&lt;/a&gt; titled “How I learned to stop worrying and love my community”.  He outlined all the reasons why a lot of people don’t publish their code and don’t publish their thoughts online. I thought he was being modest, the man is clearly talented at what he does so he didn’t have to worry however, someone like me still had these fears.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>