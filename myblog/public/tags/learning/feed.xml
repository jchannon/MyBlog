<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>learning on </title>
    <link>/tags/learning/</link>
    <description>Recent content in learning on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Feb 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/learning/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Evaluating KnockoutJS and AngularJS – Part 1</title>
      <link>/2013-02-05-evaluating-knockoutjs-and-angularjs-part-1/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-02-05-evaluating-knockoutjs-and-angularjs-part-1/</guid>
      <description>&lt;p&gt;As I stated in my earlier post &lt;a href=&#34;http://blog.jonathanchannon.com/2013/01/09/javascript-is-the-future-maybe/&#34; title=&#34;JavaScript is the future…maybe!&#34;&gt;“JavaScript is the future…maybe”&lt;/a&gt; so with that in mind I had to brush up my JS skills and get more involved with the language’s core concepts so after watching some videos and reading some articles I was ready to look at &lt;a href=&#34;http://knockoutjs.com&#34;&gt;KnockoutJS&lt;/a&gt; and &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before I actually looked at these two I spent some time with &lt;a href=&#34;http://sammyjs.org/&#34;&gt;SammyJS&lt;/a&gt; but realised afterwards it was mainly MVC based and not around 2-way binding that Knockout and Angular offer. However, I really liked it and it seemed very familiar and easy to use, the reason being it was inspired by &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; which we all know &lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; was also inspired by and we also know how much &lt;a href=&#34;http://nancyfx.org/mvm.html&#34;&gt;I like Nancy&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Getting to grips with any language or frameworks is tricky and the best way to do it is to write an application using it. The next difficult thing to overcome is an idea for writing an application. ToDo list’s are very common with JavaScript frameworks and there is a whole website for you to peruse but after looking at SammyJS and their docs they walk through writing a simple shopping basket so I thought I’d use that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evaluating KnockoutJS and AngularJS – Part 2</title>
      <link>/2013-02-05-evaluating-knockoutjs-and-angularjs-part-2/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-02-05-evaluating-knockoutjs-and-angularjs-part-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://blog.jonathanchannon.com/2013/02/05/evaluating-knockoutjs-and-angularjs-part-1/&#34; title=&#34;Evaluating KnockoutJS and AngularJS – Part 1&#34;&gt;Part 1&lt;/a&gt;, I described how I was using the demo tutorial from &lt;a href=&#34;http://sammyjs.org/&#34;&gt;SammyJS&lt;/a&gt; to get a better understanding of &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;KnockoutJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this blog post I will focus on what I found when using KnockoutJS.&lt;/p&gt;
&lt;p&gt;Again if you just want to get to the code then feel free to take a look here for &lt;a href=&#34;https://github.com/jchannon/AngularShopping&#34;&gt;Angular&lt;/a&gt; and here for &lt;a href=&#34;https://github.com/jchannon/KnockoutShopping&#34;&gt;Knockout&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;knockout&#34;&gt;Knockout&lt;/h2&gt;
&lt;p&gt;Firstly Knockout should be commended on their documentation and online tutorials. Their website tutorials follows a step by step approach and once you have completed each step you can click through to the next section. You can also leave the tutorial and come back to it and it will remember where you left. There is great support in the KnockoutJS room in Jabbr and I’d like to thank &lt;a href=&#34;https://twitter.com/davepermen&#34;&gt;David Spörri&lt;/a&gt; for answering my newbie JS and Knockout questions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript is the future…maybe!</title>
      <link>/2013-01-09-javascript-is-the-future-maybe/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-01-09-javascript-is-the-future-maybe/</guid>
      <description>&lt;p&gt;I’m not one for New Years resolutions but I thought it was time I looked at JavaScript more in depth.&lt;/p&gt;
&lt;p&gt;I looked at &lt;a href=&#34;http://blog.jonathanchannon.com/2012/10/08/node-js-express-hello-world-formula-1-style/&#34; title=&#34;Node.js, Express, Hello World Formula 1 Style&#34;&gt;Node.js a while back&lt;/a&gt; and found it very interesting and I probably need to go back to it. Over the last month or so there has been a large discussion about async in .Net frameworks and there appears to be a lot of misunderstanding about it (and lets leave it at that, I don’t want to start another flame war) but the thing we can definitely say with &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, well JavaScript to be fair is that it is perfectly asynchronous and non-blocking.&lt;/p&gt;
&lt;p&gt;As a web developer I have used JavaScript from the early days of Response.Write moving onto frameworks such as &lt;a href=&#34;http://script.aculo.us/&#34;&gt;script.aculo.us&lt;/a&gt; and &lt;a href=&#34;http://mootools.net/&#34;&gt;MooTools&lt;/a&gt; and finally ending up with &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; which has come pretty much a standard these days so my JavaScript skills are not completely new.&lt;/p&gt;
&lt;p&gt;However, there has been a large push to use JS more and more for rich user friendly applications with things like &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;KnockoutJS&lt;/a&gt;, &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and &lt;a href=&#34;http://backbonejs.org/&#34;&gt;BackboneJS&lt;/a&gt; on the client and Node.js on the server. Microsoft has even taken a prominent role in helping bring Node.js to a Windows environment as it started out on *nix based platforms. They have also started contributing to and including scripts in their Visual Studio project templates for jQuery.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The For Loop is the devil in disguise</title>
      <link>/2012-11-23-the-for-loop-is-the-devil-in-disguise/</link>
      <pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-11-23-the-for-loop-is-the-devil-in-disguise/</guid>
      <description>&lt;p&gt;I recently spoke to someone about the ‘for’ loop who opened my eyes to how unstructured the ‘for’ loop is.&lt;/p&gt;
&lt;p&gt;I have only ever used it in the traditional sense of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(int i = 0; i &amp;lt; 10; i++)
{

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I looked into some more and thought I’d show anybody else who may not have known about this innocent little thing in the C# language. It may exist in other languages but I am explicitly talking about C#.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (; ; )
{
  Console.WriteLine(&amp;quot;Hi&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some reason this compiles and executes! Who knew? Smarter people than me obviously. What do you expect it to output?&lt;/p&gt;
&lt;p&gt;The answer is it outputs “Hi” forever as there is nothing to determine when the loop should end however there is nothing to determine when it should start either.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>