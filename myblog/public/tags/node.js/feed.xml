<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>node.js on </title>
    <link>/tags/node.js/</link>
    <description>Recent content in node.js on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/node.js/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using SQL Server with node.js</title>
      <link>/2013-12-20-using-sql-server-with-nodejs/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-12-20-using-sql-server-with-nodejs/</guid>
      <description>&lt;p&gt;I like to keep eyes and ears open for new technologies and methodologies in order to become a better developer and I&amp;rsquo;d heard about &lt;a href=&#34;http://tjanczuk.github.io/edge/#/&#34;&gt;edge.js&lt;/a&gt; many months ago but made a mental note of it and waved it goodbye.  edge.js lets you have two-way communication between node and C# libraries.  When I first looked at it I thought that sounded a bit hacky, I&amp;rsquo;ve spent my time communicating with COM libraries in Delphi and OCX libraries with C# and didn&amp;rsquo;t like it so I felt this was pretty much the same thing.  A long time passed and I was writing a console based Windows app as a service and had wondererd whether I could quickly port it to node.&lt;/p&gt;
&lt;p&gt;I was discussing with a colleague about using node at work and that we needed something seperate and small just to try it out and see how the whole developement process with it worked.  As the database that this app needed to communicate with was MSSQL I looked into a library on NPM that would communicate with MSSQL and maybe act as an ORM.  There was a Microsoft lib that seemed untouched and reading the comments on the issues list on Github it didnt favour too well.  There were libraries that would communicate with MySQL &amp;amp; PostgresSQL but not MSSQL.  In my search I came across edge.js again.  It had 2 samples, one that used edge-sql and one that used ScriptCS so in laymans terms, one that used a precompiled dll and one that used a C# script that was executed at runtime.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Old Development Language Switcheroo</title>
      <link>/2013-04-02-the-old-development-language-switcheroo/</link>
      <pubDate>Tue, 02 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-04-02-the-old-development-language-switcheroo/</guid>
      <description>&lt;p&gt;As a C# developer I think I’m pretty safe in saying that its not going away any time soon however, its my opinion that to not become irrelevant you need to have options. Some may argue that its better to be master of one than a Jack of all trades but lets just say you can’t find your next job in the primary language you want to work in. What do you do?&lt;/p&gt;
&lt;p&gt;I have looked more into JavaScript recently and with that comes server and client scope for the use of the language so with some understanding of JS that would be probably the best bet for me however, as much as this may annoy some I think I actually prefer statically typed languages.&lt;/p&gt;
&lt;p&gt;Now I know there is &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; that I could use for my &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; apps but I see that as more of a workaround and not a core feature of JavaScript. I’m not saying anything bad against JS and the libraries/frameworks that I have used I like but I just find it easier to learn and know what I can do when I have decent intellisense showing me what I can do with my code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript is the future…maybe!</title>
      <link>/2013-01-09-javascript-is-the-future-maybe/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>/2013-01-09-javascript-is-the-future-maybe/</guid>
      <description>&lt;p&gt;I’m not one for New Years resolutions but I thought it was time I looked at JavaScript more in depth.&lt;/p&gt;
&lt;p&gt;I looked at &lt;a href=&#34;http://blog.jonathanchannon.com/2012/10/08/node-js-express-hello-world-formula-1-style/&#34; title=&#34;Node.js, Express, Hello World Formula 1 Style&#34;&gt;Node.js a while back&lt;/a&gt; and found it very interesting and I probably need to go back to it. Over the last month or so there has been a large discussion about async in .Net frameworks and there appears to be a lot of misunderstanding about it (and lets leave it at that, I don’t want to start another flame war) but the thing we can definitely say with &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, well JavaScript to be fair is that it is perfectly asynchronous and non-blocking.&lt;/p&gt;
&lt;p&gt;As a web developer I have used JavaScript from the early days of Response.Write moving onto frameworks such as &lt;a href=&#34;http://script.aculo.us/&#34;&gt;script.aculo.us&lt;/a&gt; and &lt;a href=&#34;http://mootools.net/&#34;&gt;MooTools&lt;/a&gt; and finally ending up with &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; which has come pretty much a standard these days so my JavaScript skills are not completely new.&lt;/p&gt;
&lt;p&gt;However, there has been a large push to use JS more and more for rich user friendly applications with things like &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;KnockoutJS&lt;/a&gt;, &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and &lt;a href=&#34;http://backbonejs.org/&#34;&gt;BackboneJS&lt;/a&gt; on the client and Node.js on the server. Microsoft has even taken a prominent role in helping bring Node.js to a Windows environment as it started out on *nix based platforms. They have also started contributing to and including scripts in their Visual Studio project templates for jQuery.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing your application’s email logic</title>
      <link>/2012-10-25-testing-your-applications-email-logic/</link>
      <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-10-25-testing-your-applications-email-logic/</guid>
      <description>&lt;p&gt;If you’ve ever written an application that sends out email you may have written the code and executed it numerous times to check that the logic works and that the email appears as you hope. This obviously means you have to hit your SMTP server each time, open your email client and check your emails each time.&lt;/p&gt;
&lt;h3 id=&#34;papercut&#34;&gt;Papercut&lt;/h3&gt;
&lt;p&gt;Reading through my Twitter timeline I saw &lt;a href=&#34;http://twitter.com/TheCodeJunkie&#34;&gt;@TheCodeJunkie&lt;/a&gt; asking about the app that you can use to test sending emails from your application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/blogpostimages/tweet.png&#34; alt=&#34;TheCodeJunkie Tweet&#34;&gt;&lt;/p&gt;
&lt;p&gt;Intrigued, I kept an eye on my timeline and found that the application in question was &lt;a href=&#34;http://papercut.codeplex.com/&#34;&gt;Papercut&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js, Express, Hello World Formula 1 Style</title>
      <link>/2012-10-08-node-js-express-hello-world-formula-1-style/</link>
      <pubDate>Mon, 08 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>/2012-10-08-node-js-express-hello-world-formula-1-style/</guid>
      <description>&lt;p&gt;In my ongoing efforts to be a better developer (plus I just like tinkering) I thought I would take a look at &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did play with node.js about a year ago where I setup a TCP listener to listen to a TCP Server on the network broadcasting XML messages, I then took these, formatted them to JSON and passed it to a browser using &lt;a href=&#34;http://socket.io/&#34;&gt;Socket.IO&lt;/a&gt;. It was pretty cool but the project never came to anything.&lt;/p&gt;
&lt;p&gt;However, I thought I would re-visit and setup a proper development environment on my Mac at home.&lt;/p&gt;
&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;
&lt;p&gt;There are many editors/IDE’s that you can use for node.js development such as Vim, Eclipse, WebStorm, Aptana Studio, Emacs and Cloud9 IDE.  As I have used &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text 2&lt;/a&gt; (ST2) before I thought I would use this because I like it and all the cool kids use it!!&lt;/p&gt;
&lt;p&gt;Coming from a mainly IDE based background I started to find things a bit hard going however ST2 allows plugins to be used to make the user experience a lot nicer.  Below are a list of plugins I have installed:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>