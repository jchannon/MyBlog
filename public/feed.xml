<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://blog.jonathanchannon.com/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.jonathanchannon.com/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terminology Glossary</title>
      <link>https://blog.jonathanchannon.com/post/terminology-glossary/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/terminology-glossary/</guid>
      <description>&lt;p&gt;This page will list and describe common words and terms that you might come across as a software developer which you can refer to at a later date knowing there&amp;rsquo;s a place to go to when someone uses a term that you don&amp;rsquo;t know, are unsure of or can&amp;rsquo;t remember&lt;/p&gt;
&lt;h3 id=&#34;terms&#34;&gt;Terms&lt;/h3&gt;
&lt;p&gt;Cohesion -&lt;br&gt;
Composition Root -&lt;br&gt;
Coupling -&lt;br&gt;
Cross-Cutting -&lt;br&gt;
KPI -&lt;br&gt;
Lift &amp;amp; Shift -&lt;br&gt;
OKR -&lt;br&gt;
Orthogonal -&lt;br&gt;
Projection -&lt;br&gt;
Shift Left -&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tracing IO in .NET Core</title>
      <link>https://blog.jonathanchannon.com/post/tracing-io-netcore/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/tracing-io-netcore/</guid>
      <description>&lt;p&gt;I was made aware of &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry&lt;/a&gt; a while ago by a &lt;a href=&#34;https://jimmybogard.com/building-end-to-end-diagnostics-and-tracing-a-primer/&#34;&gt;blog series&lt;/a&gt; &lt;a href=&#34;https://twitter.com/jbogard&#34;&gt;Jimmy Bogard&lt;/a&gt; and put it in my favourites to read at a later date.  Of course I didn&amp;rsquo;t really get back to it in depth and gave it a quick scan at the time although it is a well written in depth blog series so I suggest you do check it out.  A while later I saw a &lt;a href=&#34;https://rehansaeed.com/deep-dive-into-open-telemetry-for-net/&#34;&gt;blog post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/RehanSaeedUK&#34;&gt;Rehan Saeed&lt;/a&gt; which gives an introduction on what OpenTelemetry is and how it works and the concepts behind it and is definitely worth a read.  At the same time I saw a &lt;a href=&#34;https://www.youtube.com/watch?v=FikF0DtxZno&#34;&gt;YouTube video&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/EltonStoneman&#34;&gt;Elton Stoneman&lt;/a&gt; that whilst more aimed at using tracing using Kubernetes he demonstrates a .NET app running and the tracing details appear in &lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding type aliases</title>
      <link>https://blog.jonathanchannon.com/post/understanding-type-aliases/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/understanding-type-aliases/</guid>
      <description>I recently wrote a single case discriminated union which is what I wanted but was also confused why it didn&amp;rsquo;t behave like a type alias and then learnt that these two are different things.
type CustomerId = int
type CustomerId = CustomerId of int
I was aware of both syntaxes and from a quick scan they look the same however they behave differently and rightly so. As I travel the F# road there is more emphasis on creating types for your functions.</description>
    </item>
    
    <item>
      <title>Understanding F# applicatives and custom operators</title>
      <link>https://blog.jonathanchannon.com/post/understanding-fsharp-applicatives-custom-operators/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/understanding-fsharp-applicatives-custom-operators/</guid>
      <description>&lt;p&gt;After discussing something with Ian Russell he suggested I take some time to read through another fine &lt;a href=&#34;https://www.softwarepark.cc/blog/2019/12/8/functional-validation-in-f-using-applicatives&#34;&gt;blog post&lt;/a&gt; he has written and understand F# applicatives and custom operators.  I found myself in familiar territory when reading F# blog posts and it&amp;rsquo;s something similar to the five stages of grief. Nod, Nod, I understand what&amp;rsquo;s going on, Umm, WTF is going on.  As Ian did in his &lt;a href=&#34;https://www.softwarepark.cc/blog/2019/9/12/introduction-to-functional-programming-in-f&#34;&gt;Intro to F#&lt;/a&gt; series he sets out a simple domain problem and goes about how to address it.  We want to return a &lt;code&gt;ValidatedUser&lt;/code&gt; from a function but if the user fails validation we return a list of validation errors.&lt;/p&gt;
&lt;p&gt;The code in the blog post was pretty self explanatory until, it wasn&amp;rsquo;t, which I have pasted below:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding F# map/bind</title>
      <link>https://blog.jonathanchannon.com/post/understanding-fsharp-map-and-bind/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/understanding-fsharp-map-and-bind/</guid>
      <description>&lt;p&gt;This blog post aims to explain map/bind in F# in a code only example. It took me a while so I&amp;rsquo;m writing it up here so I can come back to it and re-read it for the 100th time most likely!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Feature Management in F#/Giraffe/ASP.NET Core</title>
      <link>https://blog.jonathanchannon.com/post/feature-management-fsharp/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/feature-management-fsharp/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://joestead.codes/posts/testing-in-production-feature-toggling-netcore/&#34;&gt;Joe&amp;rsquo;s post&lt;/a&gt; I thought I&amp;rsquo;d see how one would do this in F# and Giraffe because why not?  Turns out its quite simple.  First, create a &lt;code&gt;features.json&lt;/code&gt; file:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goodbye NancyFX, Hello F#!</title>
      <link>https://blog.jonathanchannon.com/post/goodbye-nancyfx-hello-fsharp/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/goodbye-nancyfx-hello-fsharp/</guid>
      <description>&lt;p&gt;As some of you may already know, NancyFX has been archived 11 years after its first commit.  You can read the announcement &lt;a href=&#34;https://github.com/NancyFx/Nancy#-announcement----nancy-is-no-longer-being-maintained&#34;&gt;here&lt;/a&gt; for further information but I will never forget what I learnt from this codebase, the community around it and most especially the people involved with it.  I am very proud and honoured to have been involved with it and a massive thank you to &lt;a href=&#34;https://twitter.com/thecodejunkie&#34;&gt;Andreas HÃ¥kansson&lt;/a&gt; for teaching me plenty via the 1:1 Skype calls we had in the early days.  As many of you also know I created &lt;a href=&#34;https://github.com/CarterCommunity/Carter/&#34;&gt;Carter&lt;/a&gt; which in my mind was Nancy v2 but sat on top of ASP.NET Core with the same approaches as Nancy, offering many things a web framework should have.  The usage of Carter has steadily increased which is good to know people value similar things we achieved with Nancy.  However, paradoxically I have had a feeling brewing for sometime that this effort is almost futile.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing Carter</title>
      <link>https://blog.jonathanchannon.com/post/announcing-carter/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/announcing-carter/</guid>
      <description>&lt;p&gt;As of beginning of April 2018 Botwin has been renamed to Carter.  Whilst I thought the name was genius it became obvious that some people didn&amp;rsquo;t like it or understand it and tried to interpret it as a Bot framework for Windows.  After spending too long trying to think of a new name I finally decided upon Carter. Carter comes from the surname of Jay-Z (Shawn Carter) and in his song Empire State of Mind he sings &amp;ldquo;I&amp;rsquo;m the new Sinatra&amp;rdquo;. Sinatra is a web framework which inspired Nancy which heavily inspired Botwin.&lt;/p&gt;
&lt;p&gt;The last release of Botwin was 3.5.0 but the same package has also been released under Carter 3.5.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Debugging .Net Core apps inside Docker container with VSCode</title>
      <link>https://blog.jonathanchannon.com/post/debugging-netcore-docker/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/debugging-netcore-docker/</guid>
      <description>&lt;p&gt;So by now using .Net Core on Linux is old news, everyone is doing it and deploying their production apps on Kubernetes to reach peak &amp;ldquo;I can scale&amp;rdquo; points.  However, one thing that can get tricky is when you have a requirement to debug an application in a container.  I believe VS on Windows and VS for Mac has some sort of capability to do that (I have no idea what it does underneath but hey who cares I can right click debug right!?) but the information about doing this in VSCode is a bit sketchy.  I tend to use VSCode on OSX the most so I wanted to see how I could do this.&lt;/p&gt;
&lt;p&gt;For demonstration purposes lets take a very simple application and we are going to publish it as a self contained application ie/one that has all the runtime and application binaries outputted so you don&amp;rsquo;t have to install dotnet in a container.&lt;/p&gt;
&lt;p&gt;To be able to debug that application we are going to need VSDBG(the .Net Core command line debugger) inside the container.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l ~/vsdbg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We are also going to need to append the launch.json for VSCode in your project&amp;rsquo;s root to have the below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;.NET Core Remote Attach&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;coreclr&amp;quot;,
    &amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;,
    &amp;quot;processId&amp;quot;: &amp;quot;${command:pickRemoteProcess}&amp;quot;,
    &amp;quot;pipeTransport&amp;quot;: {
        &amp;quot;pipeProgram&amp;quot;: &amp;quot;bash&amp;quot;,
        &amp;quot;pipeArgs&amp;quot;: [ &amp;quot;-c&amp;quot;, &amp;quot;docker exec -i json ${debuggerCommand}&amp;quot; ],
        &amp;quot;debuggerPath&amp;quot;: &amp;quot;/root/vsdbg/vsdbg&amp;quot;,
        &amp;quot;pipeCwd&amp;quot;: &amp;quot;${workspaceRoot}&amp;quot;,
        &amp;quot;quoteArgs&amp;quot;: true
    },
    &amp;quot;sourceFileMap&amp;quot;: {
        &amp;quot;/Users/jonathan/Projects/jsonfile&amp;quot;: &amp;quot;${workspaceRoot}&amp;quot;
    },
    &amp;quot;justMyCode&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Using Docker with .Net Core in CI for OSS</title>
      <link>https://blog.jonathanchannon.com/post/using-docker-with-netcore-ci/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-docker-with-netcore-ci/</guid>
      <description>&lt;p&gt;I recently wrote a &lt;a href=&#34;http://blog.jonathanchannon.com/2017/05/04/announcing-botwin/&#34;&gt;project&lt;/a&gt; for &lt;a href=&#34;https://t.co/kpkdInRgwG&#34;&gt;ASP.NET Core 2&lt;/a&gt;  and the time had come to get a CI system up and running.  I develop on OSX and mainly test on OSX &amp;amp; Linux and so the defacto place to go is TravisCI.  I&amp;rsquo;ve used it in the past and all has been great but I put out a tweet asking if Travis was still the place to go:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Announcing Botwin</title>
      <link>https://blog.jonathanchannon.com/post/announcing-botwin/</link>
      <pubDate>Thu, 04 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/announcing-botwin/</guid>
      <description>&lt;p&gt;Whilst keeping my eye on what&amp;rsquo;s going on in .NET Core v2 I came across some planned changes for ASP.NET Core regarding the &lt;a href=&#34;https://github.com/aspnet/Routing/blob/dev/src/Microsoft.AspNetCore.Routing/RequestDelegateRouteBuilderExtensions.cs&#34;&gt;routing&lt;/a&gt;.  I had also read this &lt;a href=&#34;https://www.strathweb.com/2017/01/building-microservices-with-asp-net-core-without-mvc/&#34;&gt;blog post&lt;/a&gt; from &lt;a href=&#34;https://twitter.com/filip_woj&#34;&gt;Filip&lt;/a&gt; about using the planned changes for microservices and a lightbulb went off in my head.  I thought to myself I wonder if I could adapt the new extensions to create Nancy-esque routing.  Turns out, I could!&lt;/p&gt;
&lt;h3 id=&#34;sample&#34;&gt;Sample&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;public class ActorsModule : BotwinModule
{
    public ActorsModule()
    {
        this.Get(&amp;quot;/&amp;quot;, async (req, res, routeData) =&amp;gt;
        {
            await res.WriteAsync(&amp;quot;Hello World!&amp;quot;);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Building all and current dotnet core projects in VSCode</title>
      <link>https://blog.jonathanchannon.com/post/building-all-current-dotnet-core-projects-vscode/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/building-all-current-dotnet-core-projects-vscode/</guid>
      <description>&lt;p&gt;As you may or may not know I try to work on OSX as much as possible and with .Net that&amp;rsquo;s quite painful to be honest.  Things are moving along nicely with Jetbrains Rider,
VSCode, Xamarin and Omnisharp.  I&amp;rsquo;ll be honest, none of them are perfect and I often find myself using Visual Studio in a VM because it just works (yes, its clunky etc etc).
Recently, VSCode got a 1.3 release with some new features, tabs being one of them.  I never really got on with VSCode so dismissed it most of the time but this new release
opened my eyes a bit more and thought I&amp;rsquo;d give it a go.  Its C# support now runs on .Net Core RTM and most of my work at the moment is porting projects to .Net Core so it seemed
this would be worthwhile.  I&amp;rsquo;ve tried to setup keybindings that are the ones I know from Visual Studio and installed couple of extensions to make things easier and prettier.&lt;/p&gt;
&lt;p&gt;As VSCode is language agnostic the one thing I found was how to build .Net Core projects was a bit off.  For each project you have you have to configure a task runner.  VSCode tries to
help you here and gives you a few languages to choose from.  For .Net Core it creates a &lt;code&gt;dotnet build&lt;/code&gt; task.  The problem with this is that it runs that command from the workspace root,
ie the folder where VSCode is opened.  What if you open it from the git root folder and your project(s) are under a src/MyProject folder?  It will fail as it cant find project.json.
What you can do is set the &lt;code&gt;cwd&lt;/code&gt; to be a specific directory by hardcoding it in the task configuration but thats not great if you have multiple projects.  You could use some predefined
variables that VSCode provides eg/&lt;code&gt;${fileDirname}&lt;/code&gt; but again if you are in a folder 4 levels deep that wont work either.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Porting OWIN middleware to ASP.Net Core</title>
      <link>https://blog.jonathanchannon.com/post/porting-owin-middleware-aspnetcore/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/porting-owin-middleware-aspnetcore/</guid>
      <description>&lt;p&gt;In our application at work we make use of various middleware and as we are making everything run on .Net Core the time has come to port said middleware to .Net Core.  If you don&amp;rsquo;t already know ASP.Net Core has a bridge that allows you to use OWIN components in an ASP.Net Core application.  This will convert the HttpContext into a OWIN environment dictionary on input and then back again on output.&lt;/p&gt;
&lt;p&gt;Lets take an example of some middleware&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class MyMiddleware
{
    private readonly Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt; nextFunc;
    private readonly OwinUserMiddlewareOptions options;

    public OwinUserMiddleware(Func&amp;lt;IDictionary&amp;lt;string, object&amp;gt;, Task&amp;gt; nextFunc, MyMiddlewareOptions options)
    {
        this.options = options;
        this.nextFunc = nextFunc;
    }

    public Task Invoke(IDictionary&amp;lt;string, object&amp;gt; environment)
    {
        //Everything is awesome
        return nextFunc(environment);
    }
}

public static class MyMiddlewareExtensions
{
    public static IAppBuilder UseMyMiddleware(this IAppBuilder app, MyMiddlewareOptions options = null)
    {
        return app.Use(typeof(MyMiddleware), options);
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>What is a Hypermedia client?</title>
      <link>https://blog.jonathanchannon.com/post/what-is-a-hypermedia-client/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/what-is-a-hypermedia-client/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been interested in Hypermedia for quite a while.  I bugged &lt;a href=&#34;http://twitter.com/darrelmiller&#34;&gt;Darrel Miller&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/gblock&#34;&gt;Glenn Block&lt;/a&gt; (Glenn Miller) so much so they created a &lt;a href=&#34;https://www.youtube.com/playlist?list=PLbc9sDUxHqX60XJaTnNnKvI2mRighInDW&#34;&gt;YouTube show&lt;/a&gt; called &amp;ldquo;In The Mood for HTTP&amp;rdquo;.  I bought their book &lt;a href=&#34;http://webapibook.net/&#34;&gt;&amp;ldquo;Designing Evolvable Web APIs with ASP.NET&amp;rdquo;&lt;/a&gt;, I am waiting for &lt;a href=&#34;http://shop.oreilly.com/product/0636920037958.do&#34;&gt;&amp;ldquo;RESTful Web Clients Enabling Reuse Through Hypermedia&amp;rdquo;&lt;/a&gt; by &lt;a href=&#34;http://twitter.com/mamund&#34;&gt;Mike Amundsen&lt;/a&gt;, I have &lt;a href=&#34;http://blog.jonathanchannon.com/2015/08/07/hypermedia-and-nancyfx/index.html&#34;&gt;written&lt;/a&gt; about how to return different media types with NancyFX and I am looking at going to &lt;a href=&#34;http://2016.uk.restfest.org/&#34;&gt;restfest.org&lt;/a&gt; in Edinburgh this year, a REST conference.&lt;/p&gt;
&lt;p&gt;The one thing that I have always discussed with Glenn Miller is that there seems, or from my perception, that there is a lot of emphasis on the server returning media types(HAL,Siren,JSON-LD, Collection+Json) and very little information about hypermedia clients.  The information that I have come across which is very little, again coulkd be due to my lack of Google-fu, seems to generate a mis-conception.  The mis-conception I have come across is that if you have an API that returns hypermedia then your client should be able to magically work with it.  It should know everything that is required to browse the API and discover its way around.  I never quite grasped how that was supposed to happen and was serioulsy confused.  I had seen a video that showed when the server returned its responses, using Javascript it would loop over all the properties in the payload and then display them in a HTML page.  The emphasis was that if new bits of data were added then they would appear magically in the UI.  That seemed like a nice feature but I still didn&amp;rsquo;t quite get how it went from hitting the root of the API to finding its way into the guts of it.  The server would return links in the payload with &amp;ldquo;rels&amp;rdquo; and I was baffled how this magic client knew what to do with a rel or even how it knew what rels it would return.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>VQ Communications Funds NancyFX to run on CoreCLR</title>
      <link>https://blog.jonathanchannon.com/post/vq-communications-funds-coreclr-nancyfx/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/vq-communications-funds-coreclr-nancyfx/</guid>
      <description>&lt;p&gt;Nearly 2 years ago I was employed by &lt;a href=&#34;http://www.vqcomms.com&#34;&gt;VQ Communications&lt;/a&gt; primarily because of my open source contributions to &lt;a href=&#34;http://nancyfx.org&#34;&gt;NancyFX&lt;/a&gt;.  They had started work on a v2 of their flagship product and had begun work with Nancy and needed someone to help drive a HTTP API and architect a scaling solution as their v2 product was addressing a requirement they had for it cope with large volumes of traffic.  Also of interest to me was their aim to deliver all of this as a black box appliance to customers on a VM running a custom embedded version of Linux using Postgres as the database.  I would work four days a week remotely and go into the office one day a week.  They already had completely remote employees and since I have been there they have taken on more. There are lots more juicy technical examples in the stack I could go into however, this is not the point of this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Profiling a CoreCLR application with dotMemory</title>
      <link>https://blog.jonathanchannon.com/post/profiling-coreclr-application/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/profiling-coreclr-application/</guid>
      <description>&lt;p&gt;I had ported an application over to CoreCLR (that&amp;rsquo;s a whole other blog post), along with my colleague &lt;a href=&#34;http://twitter.com/yantrio&#34;&gt;James Humphries&lt;/a&gt; put it in a docker image and sat back and watched it do its thing.  After 6 hours of running the docker container had crashed.  Ah nuts we thought,  so pulled up the logs from docker and the last line looked like this &lt;code&gt;2016-02-10T20:18:31.728783069Z Killed&lt;/code&gt;.  I&amp;rsquo;m pretty sure when you have a log entry with &lt;code&gt;Killed&lt;/code&gt; in it, things can&amp;rsquo;t be good. To the interweb&amp;hellip;&lt;/p&gt;
&lt;p&gt;I opened up the CoreFX repository on Github to search for the term &lt;code&gt;Killed&lt;/code&gt; and there were 2 comments but nothing that was logged out anywhere.  I then Googled for docker and killed and there was an entry that someone else had spotted on their container and the feedback was essentially it was probably out of memory.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Negotiator  - a GoLang content negotiation library</title>
      <link>https://blog.jonathanchannon.com/post/content-negotiation-golang/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/content-negotiation-golang/</guid>
      <description>&lt;p&gt;In my continued experience learning GoLang I started looking at how to best use it when dealing with HTTP.  The idiomatic way to use GoLang and HTTP is to use the standard library which keeps things minimal but there are a few features missing.  The first thing is a router.  OOTB GoLang doesn&amp;rsquo;t have a router and the majority seem to suggest using a package called Mux from Gorilla Toolkit, a set of libraries that aims to improve the standard library from Go.  After having a play with it I didn&amp;rsquo;t really warm to it so spent some time looking into the alternatives (and there are plenty!) and eventually decided upon &lt;a href=&#34;https://goji.io&#34;&gt;Goji&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once I had started using Goji I then wanted to handle content negotiation in my HTTP handler.  As I said earlier GoLang is minimal in its offerings OOTB and this is a good thing.  Just for the record there are a few frameworks out there if you want/need and all encompassing framework such as Martini, Revel and Echo.  These tend to bend the idioms  of GoLang a bit and even the author of Martini blogged on this fact due to feedback from the community that although its capabilities are great they aren&amp;rsquo;t idiomatic Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing PoGo  - a GoLang, Twitter favourites to Pocket importer</title>
      <link>https://blog.jonathanchannon.com/post/introducting-pogo-golang-twitter-pocket/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/introducting-pogo-golang-twitter-pocket/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve always kept myself up to date with the latest languages arriving on the scene and I&amp;rsquo;ve spent time in the past learning Node and last year I learnt Python by doing the Omnisharp plugin for Sublime.  I have recently been looking for a static language that I can transfer my C# skills too and I had narrowed it down to 3; Swift, Kotlin and GoLang.  I started out with Kotlin and setting up a dev environment with IntelliJ and running the koans that Jetbrains advise you step through to pick up the language.  Whilst it seemed relatively straightforward I got &amp;ldquo;noob confused&amp;rdquo; when I saw examples of Java calling into Kotlin with get/set prefixes somehow magically added to Kotlin properties. It turns out the Kotlin compiler does this for Java libraries so it can communicate with it, to me it seemed strange that I code a library in one language and the compiler then exposes these methods and properties slightly differently. Superficial as this sounds I also didn&amp;rsquo;t really like the mammoth that appears to be IntelliJ.  Coming from a predominantly Visual Studio background but working with Omnisharp I wanted a lightweight editor with some refactoring, intellisense and error highlighting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NancyFX and Hypermedia</title>
      <link>https://blog.jonathanchannon.com/post/hypermedia-and-nancyfx/</link>
      <pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/hypermedia-and-nancyfx/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been slowly educating my self on hypermedia; what it is, how does it help and how to use it.  I must say I&amp;rsquo;ve found it a very interesting topic and I thought it was time I put some information into a blog post just in case the 2 people that read this blog might find it useful.&lt;/p&gt;
&lt;p&gt;In my day job I&amp;rsquo;m responsible for a HTTP API (notice I didn&amp;rsquo;t use REST) and some months ago I spoke to Glenn Block around a general discussion about hypermedia.  Glenn put this on YouTube if you want to watch it.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Cookie Authentication &amp; CRSF with AngularJs, Owin &amp; Mono</title>
      <link>https://blog.jonathanchannon.com/post/cookie-authentication-angularjs-csrf-owin-mono/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/cookie-authentication-angularjs-csrf-owin-mono/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m currently working on a project that has &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt; serving up an API.  For the UI there is AngularJS.  We were using JWT for authentication just to get us up and running but then as things became more final in the product we knew it would be better to swap to cookies for security plus we may as well leverage the browser capabilities  for cookie handling. I&amp;rsquo;m not going to get into the arguments about JWT security vs cookie security, there are advantages/disadvantages for using both in this scenario.  Our API is built on top of OWIN and Microsoft provide cookie middleware so I thought this would be nice and simple to plug in.  Lets just remember I&amp;rsquo;m working on Mono!&lt;/p&gt;
&lt;p&gt;In our Startup class I added the below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.UseCookieAuthentication(new CookieAuthenticationOptions
{
    AuthenticationMode = AuthenticationMode.Active,
    CookieHttpOnly = true,
    CookieSecure = Microsoft.Owin.Security.Cookies.CookieSecureOption.SameAsRequest,
    SlidingExpiration = true,
    AuthenticationType = &amp;quot;MyCookie&amp;quot;,
    CookieName = &amp;quot;MyCookie&amp;quot;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully thats pretty self explanatory. So I fired up my application and BOOM!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Gulp in Visual &amp; Xamarin Studio</title>
      <link>https://blog.jonathanchannon.com/post/running-gulp-in-visual-xamarin-studio/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/running-gulp-in-visual-xamarin-studio/</guid>
      <description>&lt;p&gt;I was going to write a long post explaining about all the pain I went through to get this working but then realised you probably don&amp;rsquo;t really care and you just want the code!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iYjnPK0.png&#34; alt=&#34;Show the code&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Microsoft Endorsing C# as a First Class Citizen in Sublime Text</title>
      <link>https://blog.jonathanchannon.com/post/csharp-first-class-citizen-sublime-text/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/csharp-first-class-citizen-sublime-text/</guid>
      <description>&lt;p&gt;At the end of my last &lt;a href=&#34;http://blog.jonathanchannon.com/2014/08/05/nancy-aspnetvnext-osx-sublime-text/&#34;&gt;post&lt;/a&gt; on using ASP.Net vNext with Sublime Text I briefly mentioned a &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-sublime&#34;&gt;plugin&lt;/a&gt; that aimed at giving intellisense for C# within the editor.  Well 2 months later and I&amp;rsquo;m happy to announce that intellisense works and I&amp;rsquo;ve added a slew of other features that will hopefully make you feel at home away from Visual Studio.&lt;/p&gt;
&lt;p&gt;I discovered the plugin thanks to &lt;a href=&#34;http://twitter.com/jasonimison&#34;&gt;Jason Imison&lt;/a&gt; but at that point there was some issues getting the intellisense working consistently because at that time I was using it with an ASP.NET vNext application which didn&amp;rsquo;t have a solution file (*.sln) and the plugin was expecting that.  After speaking to Jason I found out I could change the settings so it wouldn&amp;rsquo;t expect a solution file and give me the intellisense I was after in a text editor.  Eureka, it worked!  I was now on a mission to make Sublime be a first class citizen when writing C#.  Some may question why on earth would I want to edit C# in something other than Visual Studio.  I don&amp;rsquo;t really want to get into that debate here but all I&amp;rsquo;ll say is, it&amp;rsquo;s nice to have other editor options and with Microsoft&amp;rsquo;s mission to provide vNext compatibility with Mono and Visual Studio not running on OSX/Linux it makes sense to have an editor with feature rich C# support (yes I know there is Xamarin Studio but &amp;ldquo;options&amp;rdquo; people, &amp;ldquo;options&amp;rdquo;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nancy, ASP.Net vNext, OSX and Sublime Text</title>
      <link>https://blog.jonathanchannon.com/post/nancy-aspnetvnext-osx-sublime-text/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/nancy-aspnetvnext-osx-sublime-text/</guid>
      <description>&lt;p&gt;One of the great things that ASP.Net vNext is bringing is the ability to use it cross platform with Microsoft actively testing their libraries against &lt;a href=&#34;http://www.mono-project.com/Main_Page&#34;&gt;Mono&lt;/a&gt;.  Along with this MS are developing a web server that is cross platform and goes by the name of &lt;a href=&#34;https://github.com/aspnet/KestrelHttpServer&#34;&gt;Kestrel&lt;/a&gt;.  One thing they aren&amp;rsquo;t doing, yet, is making Visual Studio cross platform so we need something to write our code in.  There a few editors out there but one of the most common is &lt;a href=&#34;http://www.sublimetext.com/3&#34;&gt;Sublime Text&lt;/a&gt;.  This gives you syntax highlighting and build systems that can all be configured so if you are not aware of it check it out.  Obviously before we can start writing code on OSX with our editor we need Mono installed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE - As of August 13th 2014 there is a Mono 3.6 release which means you no longer need to compile Mono but you will need to install Homebrew for ASP.Net vNext. &lt;a href=&#34;#vnext&#34;&gt;Skip to nnext section&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the time of writing the official binary for Mono is 3.4.0 and this does not include some features needed for ASP.Net vNext to run so we are going to have to manually compile Mono ourselves.  Now I know this sounds scary but its not as bad as it seems and I&amp;rsquo;ve gone through the pain of setting it up so hopefully this blog post should make it easier for you&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&#34;http://mono-project.com/Compiling_Mono_on_OSX&#34;&gt;guide&lt;/a&gt; on Mono&amp;rsquo;s website on how to compile but I found some issues with it.  I&amp;rsquo;m running on OSX Mavericks so I&amp;rsquo;m not sure if that resulted in issues but here&amp;rsquo;s my guide to get it compiling.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nancy, ASP.Net vNext, VS2014 &amp; Azure</title>
      <link>https://blog.jonathanchannon.com/post/nancy-aspnet-vnext-vs2014-azure/</link>
      <pubDate>Sat, 14 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/nancy-aspnet-vnext-vs2014-azure/</guid>
      <description>&lt;p&gt;By now we know of Microsoft&amp;rsquo;s plans for the next version of ASP.Net and they&amp;rsquo;ve turned it on its head and from the looks of it, its goooooood!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx&#34;&gt;Here&lt;/a&gt; is a blog post from Scott Hanselman introducing ASP.Net vNext. There are introductory and deep dive videos available for your perusal which are also well worth a watch.&lt;/p&gt;
&lt;p&gt;The TL;DR is ASP.Net vNext will take heavy influence from Node.js by using Owin to wire up all the app dependencies and middleware.  It will also remove *.csproj files and use a project.json file similar to Node&amp;rsquo;s package.json and use NuGet to reference the application&amp;rsquo;s dependencies.  It also takes inspiration from Node and Nancy&amp;rsquo;s approach requiring you to opt-in to dependencies rather that traditionally having everything but the kitchen sink.  It also takes influence from Nancy via built in dependency injection and Mono support.  Microsoft announced they will run all their vNext tests against Mono builds ensuring all their code is compatible for cross platform deployments.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a tweet direct from the horses mouth albeit with a typo .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XMmMDce.png&#34; alt=&#34;vNext influenced by Node/Nancy&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modifying the bash prompt and adding Git completion to terminal</title>
      <link>https://blog.jonathanchannon.com/post/modifying-bash-adding-git-auto-completion-to-terminal/</link>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/modifying-bash-adding-git-auto-completion-to-terminal/</guid>
      <description>&lt;p&gt;At work we use Git and I use &lt;a href=&#34;http://sourceforge.net/projects/console/files/&#34;&gt;Console2&lt;/a&gt; to control my terminal envrionments eg/Git Bash, Powershell, Dos and when using Git I can type part type a git command press tab and it will auto complete the command or offer suggestions to commands.  By default on OSX this behaviour is not present and it frustrated me enough to go and find out how to enable that behaviour.&lt;/p&gt;
&lt;p&gt;Fire up your terminal and type in this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will download a git completion file into your home folder to a hidden file called git-completion.bash.&lt;/p&gt;
&lt;p&gt;If the file ~/.bash_profile does not already exist create it with the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open it and paste this in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if [ -f ~/.git-completion.bash ]; then . ~/.git-completion.bash; fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you type a git command and press tab, BOOM!, you have auto complete for Git!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Introducing Owin.StatelessAuth with Nancy/Angular demo</title>
      <link>https://blog.jonathanchannon.com/post/introducing-owin-statelessauth-with-nancy-angular-demo/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/introducing-owin-statelessauth-with-nancy-angular-demo/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re writing an API, current thinking is to provide a token in the &lt;code&gt;Authorization&lt;/code&gt; header for your app to validate when the request comes in.  I have used the &lt;a href=&#34;http://www.nuget.org/packages/Nancy.Authentication.Stateless/&#34;&gt;Nancy.Authentication.Stateless&lt;/a&gt; package in the past for my APIs and even have a demo of it &lt;a href=&#34;https://github.com/jchannon/Nancy.Demo.StatelessAuth&#34;&gt;here&lt;/a&gt; if you&amp;rsquo;re interested (there are more Nancy demos at &lt;a href=&#34;http://samples.nancyfx.org/&#34;&gt;http://samples.nancyfx.org&lt;/a&gt;). This is a great package and does a great job but what if one day you want to use &lt;a href=&#34;http://www.asp.net/signalr&#34;&gt;SignalR&lt;/a&gt; v2 that uses &lt;a href=&#34;http://owin.org/&#34;&gt;OWIN&lt;/a&gt; and you want to validate not just requests to your Nancy app but also the SignalR requests?  You&amp;rsquo;re going to need to validate requests as they come in before they get to SignalR or Nancy.&lt;/p&gt;
&lt;p&gt;For those of you who are not quite up to date or unsure what OWIN is let me try and give you the tl:dr, no doubt others may say its something slightly different.  Imagine you are asked to create a ASP.Net MVC 3 app (ignore the fact that that person needs a slap) so you fire up Visual Studio and create the app.  So what has it done? Its created an app that runs on IIS and all requests come straight into your app.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using NodeJS and FTP with Promises</title>
      <link>https://blog.jonathanchannon.com/post/using-node-and-ftp-with-promises/</link>
      <pubDate>Sat, 22 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-node-and-ftp-with-promises/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve played with node in the &lt;a href=&#34;http://blog.jonathanchannon.com/2012/10/08/node-js-express-hello-world-formula-1-style/&#34;&gt;past&lt;/a&gt; but as of the new year I decided to try and make a more concerted effort to get stuck into node properly.  I decided to go back to the beginning to try and get a better appreciation for the language so read &amp;ldquo;JavaScript: The Good Parts by Douglas Crockford&amp;rdquo;.  I found that exercise fulfilling and resulted in a few light bulb moments that made some dots join up so I&amp;rsquo;d recommend reading it if you haven&amp;rsquo;t already.&lt;/p&gt;
&lt;h3 id=&#34;real-world-app&#34;&gt;Real World App&lt;/h3&gt;
&lt;p&gt;As I stated earlier I have already played with node in the past using &lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt; and have read quite a bit on node and read many examples but I wanted to write a non-web app as I felt this would give me a better opportunity to get to grips with the language and Node. Using Express allows you to get up and running very quickly without to much head scratching so I felt a standalone script would give me more exposure to things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit Testing with SqlException</title>
      <link>https://blog.jonathanchannon.com/post/unit-testing-with-sqlexception/</link>
      <pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/unit-testing-with-sqlexception/</guid>
      <description>&lt;p&gt;So after a nice Christmas break I get to some code that needs some unit testing around a try/catch. Something similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try
{
    myService.DoSomethingThatMightTakeALongTime();
}
catch (EntityCommandExecutionException ex)
{
    var exception = ex.InnerException as SqlException;
    if (exception != null)
    {
        if (exception.Number == -2)
        {
            //Do something special
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Using SQL Server with node.js</title>
      <link>https://blog.jonathanchannon.com/post/using-sql-server-with-nodejs/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-sql-server-with-nodejs/</guid>
      <description>&lt;p&gt;I like to keep eyes and ears open for new technologies and methodologies in order to become a better developer and I&amp;rsquo;d heard about &lt;a href=&#34;http://tjanczuk.github.io/edge/#/&#34;&gt;edge.js&lt;/a&gt; many months ago but made a mental note of it and waved it goodbye.  edge.js lets you have two-way communication between node and C# libraries.  When I first looked at it I thought that sounded a bit hacky, I&amp;rsquo;ve spent my time communicating with COM libraries in Delphi and OCX libraries with C# and didn&amp;rsquo;t like it so I felt this was pretty much the same thing.  A long time passed and I was writing a console based Windows app as a service and had wondererd whether I could quickly port it to node.&lt;/p&gt;
&lt;p&gt;I was discussing with a colleague about using node at work and that we needed something seperate and small just to try it out and see how the whole developement process with it worked.  As the database that this app needed to communicate with was MSSQL I looked into a library on NPM that would communicate with MSSQL and maybe act as an ORM.  There was a Microsoft lib that seemed untouched and reading the comments on the issues list on Github it didnt favour too well.  There were libraries that would communicate with MySQL &amp;amp; PostgresSQL but not MSSQL.  In my search I came across edge.js again.  It had 2 samples, one that used edge-sql and one that used ScriptCS so in laymans terms, one that used a precompiled dll and one that used a C# script that was executed at runtime.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopus XML Transformation in Services</title>
      <link>https://blog.jonathanchannon.com/post/octopus-xml-transformation-in-services/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/octopus-xml-transformation-in-services/</guid>
      <description>&lt;p&gt;We use &lt;a href=&#34;http://octopusdeploy.com/&#34;&gt;Octopus Deploy&lt;/a&gt; at work and its a superb tool for deploying your applications whether they be websites or *.exes.&lt;/p&gt;
&lt;p&gt;One of the great things it also provides is the ability to use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd465326.aspx&#34;&gt;Microsoft&amp;rsquo;s Transformation&lt;/a&gt; process for config files.  However, when deploying a exe application its a bit trickier than a website.  Unfortunately the documentation doesn&amp;rsquo;t mention the steps needed to get this working so read on!&lt;/p&gt;
&lt;p&gt;Typically a web application will have web.config and a web.Release.config as well as other derivations you may use.  Octopus also supports web.[Environment].config.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Git to update YouTrack via TeamCity</title>
      <link>https://blog.jonathanchannon.com/post/using-git-to-update-youtrack-via-teamcity/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-git-to-update-youtrack-via-teamcity/</guid>
      <description>This post is mainly a reminder for me as I keep forgetting the command in Git to integrate commits to YouTrack items.
YouTrack uses TeamCity to get the information about the commits and then scans the commit comment for a YouTrack item id and any commands that it can apply such as item status or time spent on said item.
There is some documentation here but its not the greatest in terms of clarity and I&amp;rsquo;ve spoken to Hadi Hariri from JetBrains about improving this so hopefully they&amp;rsquo;re working on it.</description>
    </item>
    
    <item>
      <title>Running Mocha tests within Sublime Text</title>
      <link>https://blog.jonathanchannon.com/post/running-mocha-tests-with-sublime-text/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/running-mocha-tests-with-sublime-text/</guid>
      <description>&lt;p&gt;I spend most of my day in Visual Studio with lots of the goodies an IDE can offer.  One of them being able to run your tests from a keystroke.&lt;/p&gt;
&lt;p&gt;In a bid to expand my mind I&amp;rsquo;m working on a little project that is made up of JS entirely so I&amp;rsquo;ve dug out &lt;a href=&#34;http://sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt;. It has lots of plugins that are very handy, especially &lt;a href=&#34;https://github.com/victorporof/Sublime-HTMLPrettify&#34;&gt;Sublime-HTMLPrettify&lt;/a&gt; which will tidy your HTML, CSS &amp;amp; JS for you.&lt;/p&gt;
&lt;p&gt;When writing tests for JS there are many libraries you can use but I&amp;rsquo;ve chosen &lt;a href=&#34;http://visionmedia.github.io/mocha/&#34;&gt;Mocha&lt;/a&gt; for now.  The one thing I couldn&amp;rsquo;t work out was to run my tests within Sublime Text until now.&lt;/p&gt;
&lt;h3 id=&#34;build-system&#34;&gt;Build System&lt;/h3&gt;
&lt;p&gt;Sublime allows you to have build systems a bit like an IDE so you can tell it what to do when you invoke it via &lt;!-- raw HTML omitted --&gt;cmd&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;B&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;To get Mocha to run we need to create a new build system. To do this click Tools - Build System - New Build System and paste in the below:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blogging with Markdown &amp; Deploying via Git - Introducing Sandra.Snow</title>
      <link>https://blog.jonathanchannon.com/post/blogging-with-markdown-and-git/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/blogging-with-markdown-and-git/</guid>
      <description>&lt;p&gt;There are many markdown blogging engines out there such as &lt;a href=&#34;http://calepin.co/&#34;&gt;Calepin&lt;/a&gt;, &lt;a href=&#34;http://scriptogr.am/&#34;&gt;Scriptogram&lt;/a&gt; and even &lt;a href=&#34;http://wordpress.org/&#34;&gt;WordPress&lt;/a&gt; allows you to write blog posts in Markdown but &lt;a href=&#34;https://github.com/Sandra/Sandra.Snow&#34;&gt;Sandra.Snow&lt;/a&gt; tries to add something different.  Firstly, it is written in .Net and &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt;, secondly its a static blog generator and finally it supports Git deployment.&lt;/p&gt;
&lt;p&gt;Even if you don&amp;rsquo;t want to use Git deployment you can use FTP, its a great tool.  To write your blog post in Markdown you need a custom header in your file so it knows some information about your post.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
category: Azure
title: Setting up a ServiceStack Service
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It then parses this information along with your Markdown into its engine, uses a Markdown view engine to convert the file content into HTML, assign model properties based on the header and creates a HTML file using the model via a Razor viewengine.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;layout&amp;rdquo; refers to the Razor file it uses to render the final HTML file.  This allows you to style your pages and blog posts whichever way you&amp;rsquo;d prefer.  These &amp;ldquo;layout&amp;rdquo; files should exist in the &amp;ldquo;_layouts&amp;rdquo; folder for your site template.  The site template is a set of files and folders that Sandra.Snow uses to produce the final static website.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;category&amp;rdquo; or &amp;ldquo;categories&amp;rdquo; property, you can use both for singular or multiple comma-seperated values that refer to the category/categories of your blog post.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;title&amp;rdquo; should hopefully be self explanatory!&lt;/p&gt;
&lt;p&gt;You can optionally add an author and email properties to override the global config settings for example, if you wanted to allow guest author blog posts.  There is also an optional metadescription property you can use for SEO.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Returning multiple fake objects with FakeItEasy</title>
      <link>https://blog.jonathanchannon.com/post/returning-multiple-fake-objects-with-fakeiteasy/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/returning-multiple-fake-objects-with-fakeiteasy/</guid>
      <description>&lt;p&gt;I was recently writing some unit tests where I needed to test that multiple calls to an interface returned different objects.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://github.com/FakeItEasy/FakeItEasy&#34;&gt;FakeItEasy&lt;/a&gt; this is easy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A.CallTo(() =&amp;gt; myInterface.GetSomething(1)).Returns(new Something())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All very nice, but now if I have multiple calls to &lt;code&gt;myInterface&lt;/code&gt; I have to execute the above statement &amp;lsquo;x&amp;rsquo; amount of times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Fact]
public void Should_Do_Something()
{
  var myInterface = A.Fake&amp;lt;IApplication&amp;gt;();
  A.CallTo(() =&amp;gt; myInterface.GetSomething(1)).Returns(new Something());
  A.CallTo(() =&amp;gt; myInterface.GetSomething(2)).Returns(new Something());
  A.CallTo(() =&amp;gt; myInterface.GetSomething(3)).Returns(new Something());
  
  var result = sut.DoSomething(myInterface);
  
  Assert.Equal(&amp;quot;Super Duper&amp;quot;, result);
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Enabling CORS in IISExpress</title>
      <link>https://blog.jonathanchannon.com/post/enabling-cors-in-iisexpress/</link>
      <pubDate>Mon, 16 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/enabling-cors-in-iisexpress/</guid>
      <description>I was playing around with swagger-ui and was trying to point it to a local endpoint that I started with IIS Express. I was getting an error saying that it needed the endpoint to accept Access-Control-Allow-Origin requests.
I went Googling and it couldn&amp;rsquo;t find anything specific to IIS Express but managed to use some guidance for full blown IIS.
The solution is to go to C:\Program Files (x86)\IIS Express\AppServer and open the applicationhost.</description>
    </item>
    
    <item>
      <title>Keeping SQL Data Organised in Integration Tests</title>
      <link>https://blog.jonathanchannon.com/post/keeping-sql-data-organised-in-integration-tests/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/keeping-sql-data-organised-in-integration-tests/</guid>
      <description>&lt;p&gt;In my latest project I had kept my solution tidy with my main app project, my unit test project and integration test project. I tend to stick with a naming convention such as MainApp, MainApp.Tests.Unit &amp;amp; MainApp.Tests.Integration.&lt;/p&gt;
&lt;p&gt;I had begun writing my integration tests for a repository that hits the database and returns data. Currently it was one method being called in the repository.  &lt;a href=&#34;http://xunit.codeplex.com/&#34;&gt;xUnit&lt;/a&gt; allows you to setup any test dependencies in the constructor of your test class.  It also allows you to do any tidying up in a Dispose method if you implement IDisposable although this is &lt;a href=&#34;http://xunit.codeplex.com/wikipage?title=Comparisons&amp;amp;referringTitle=Home#note2&#34;&gt;frowned upon&lt;/a&gt;.  However I felt for my needs I would implement this.&lt;/p&gt;
&lt;p&gt;I  was creating data in the database in the constructor which will get called before the test runs, retrieving data in the test, asserting and then deleting all data and resetting the auto-incrementing from the tables in the Dispose method.&lt;/p&gt;
&lt;p&gt;This was working perfectly until I wanted to test another method on my repository.&lt;/p&gt;
&lt;p&gt;I now needed to add data for my new method but realised if I added different data to the database in the constructor, I would be creating unnecessary data unrelated to the test.&lt;/p&gt;
&lt;p&gt;My options were to move the constructor logic into separate methods and then call the methods in the test or have separate test classes per method in the repo.  Both were a not an ideal solution and quite frankly verbose, ugly and not best practice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comparing object instances with FakeItEasy</title>
      <link>https://blog.jonathanchannon.com/post/comparing-object-instances-with-fakeiteasy/</link>
      <pubDate>Wed, 11 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/comparing-object-instances-with-fakeiteasy/</guid>
      <description>&lt;p&gt;I had the task of writing a new application recently and of course I chose &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt;.  One of the many great reasons is the testing capabilites it offers (For more on that see &lt;a href=&#34;http://www.marcusoft.net/2013/01/NancyTesting1.html&#34;&gt;this&lt;/a&gt; great series of articles).&lt;/p&gt;
&lt;p&gt;The basics of a test with Nancy looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Fact]
public void Should_return_status_ok_when_route_exists()
{
    // Given
    var bootstrapper = new DefaultNancyBootstrapper();
    var browser = new Browser(bootstrapper);
     
    // When
    var result = browser.Get(&amp;quot;/&amp;quot;, with =&amp;gt; {
        with.HttpRequest();
    });
        
    // Then
    Assert.Equal(HttpStatusCode.OK, result.StatusCode);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You set up a bootstrapper, this can be your live one or an inherited version of your live one with dependencies changed to mocks for example or use the &lt;code&gt;ConfigurableBootstrapper&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Async Route Handling with Nancy</title>
      <link>https://blog.jonathanchannon.com/post/async-route-handling-with-nancy/</link>
      <pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/async-route-handling-with-nancy/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t know about you but all I hear is &amp;ldquo;ASYNC ALL THE THINGS!&amp;rdquo;, I think this is partly down to its new and shiny and us developers love &amp;ldquo;the shiny&amp;rdquo; and partly a lot of the things we do in our applications are I/O based whether that be database or file system.&lt;/p&gt;
&lt;p&gt;The problem that comes with the new and shiny bandwagon is you need to understand what you&amp;rsquo;re evangelising. Making asynchronous methods and executing them with no actual reason will not give your codebase any gains and could actually effect your application&amp;rsquo;s performance.  There is more depth to that argument but for simplicity just remember this, only use asynchronous methods if you are doing some sort of I/O.&lt;/p&gt;
&lt;p&gt;It could also be argued that only &amp;ldquo;use asynchronicity in a web framework if you expect high traffic in your web application&amp;rdquo;. If you only have 10 requests on a small site you&amp;rsquo;re not going to benefit from asynchronous execution as there are plenty of threads available to handle your application.  If you start hitting 1000 concurrent requests (the default IIS limit) then requests will start getting queued up.  If you make your routes asynchronous then any code that is being waited on, the thread that is being used there can be released to process another request thus speeding up the performance of your app and prevent the likely hood of large queues.  I will show how simple it is to make your routes asynchronous with Nancy below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A quick look at Visual Node</title>
      <link>https://blog.jonathanchannon.com/post/a-quick-look-at-visual-node/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/a-quick-look-at-visual-node/</guid>
      <description>&lt;p&gt;I came across &lt;a href=&#34;http://www.visualnode.info/&#34;&gt;Visual Node&lt;/a&gt; a few months ago and was excited by the looks of it.  For those that didn&amp;rsquo;t click that link, it basically brings the power of Visual Studio debugging to a node.js app.  You can write your node.js app in Visual Studio, fire up the debugger by hitting F5 and use breakpoints and watches to see what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;The hipster in me is screaming saying &amp;ldquo;You should be using Sublime Text and &lt;a href=&#34;https://github.com/dannycoates/node-inspector&#34;&gt;node-inspector&lt;/a&gt; for debugging&amp;rdquo; but to be honest I found it a bit hackety-hack and it seemed a bit odd debugging my server app in Chrome but maybe that&amp;rsquo;s just something I need to get over.  JavaScript is getting a huge surge in popularity recently so its your duty as a developer to investigate this.  I want to learn and understand JS better but I always get frustrated with it after 10mins and swear that I&amp;rsquo;m never going to touch a dynamic language again, &amp;ldquo;give me a statically typed language every time with a compiler&amp;rdquo;.  I have a bit of a Jekyll and Hyde situation going on that I need to overcome.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modifying files within Git history</title>
      <link>https://blog.jonathanchannon.com/post/modifying-files-within-git-history/</link>
      <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/modifying-files-within-git-history/</guid>
      <description>&lt;p&gt;If you have been doing code changes and committing as you go and then look back at the changes you may see something you donât like the look of. Assuming no-one has a copy of your code changes you can go back and modify the files at a certain point in time within your commit history.&lt;/p&gt;
&lt;p&gt;I use Git Bash by default but the editor sucks compared to Sublime Text so first things first lets setup the Git editor.&lt;/p&gt;
&lt;p&gt;For Sublime Text run this in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global core.editor &amp;quot;&#39;C:/Program Files/Sublime Text 2/sublime_text.exe&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next up is finding the commit id you want to go back to, to edit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a note of the parent commit id of the commit you want to edit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why .Net should become independent!</title>
      <link>https://blog.jonathanchannon.com/post/why-net-should-become-independent/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/why-net-should-become-independent/</guid>
      <description>&lt;p&gt;I recently changed jobs and as usual was at the mercy of recruitment agents. The advert for my job contained things like ASP.Net MVC, Entity Framework &amp;amp; TFS (luckily there were other cool pieces of technology on that list and what the role entailed interested me and once I had joined the company I saw they were open to other tech/approaches that made peopleâs workflow and output more beneficial to developers as well as the company. In fact I implemented an API written in &lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; on my first day and paved the way for Git in the first week).&lt;/p&gt;
&lt;p&gt;My point being that whenever I hear from recruiters or look for jobs all the adverts basically list the full Microsoft stack. I recently heard from a friend who runs his own company that he gave his CV to a recruitment agent and was basically rejected because his .Net experience was not MS based enough. I know his .Net skills are very good but because those .Net skills were put to good use using OSS projects he is unlikely to get a job in the mainstream .Net market.&lt;/p&gt;
&lt;p&gt;These adverts usually contain a list of tech/experience similar to: MVC, Webforms, Visual Studio, SQL Server, Entity Framework, WCF, LINQ.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Whatâs the common denominator here?&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; They are all owned by Microsoft.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What operating system do these all run on?&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Microsoft Windows&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What framework and programming language do they run on?&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Microsoft .Net and C#&lt;/p&gt;
&lt;p&gt;Spot a pattern?&lt;/p&gt;
&lt;p&gt;So lets point out the obvious, the operating system, the frameworks, the language, the tooling and the data storage are all owned and implemented by one company (and they say Apple tries to lock its users in).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mocking HttpContext with Fake It Easy</title>
      <link>https://blog.jonathanchannon.com/post/mocking-httpcontext-with-fake-it-easy/</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/mocking-httpcontext-with-fake-it-easy/</guid>
      <description>&lt;p&gt;Lets start with the conclusion first and say âuse &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt; for your web applications and APIsâ as its brilliant!&lt;/p&gt;
&lt;p&gt;If you want to continue reading lets crack on.&lt;/p&gt;
&lt;p&gt;Iâm currently working on a ASP.Net MVC project and one of the controller methods writes directly to the Response, &lt;em&gt;eg. Response.Write(âHow will I mock thee?â);&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having moved over to &lt;a href=&#34;http://xunit.codeplex.com/&#34;&gt;xUnit&lt;/a&gt; and &lt;a href=&#34;https://github.com/FakeItEasy/FakeItEasy&#34;&gt;FakeItEasy&lt;/a&gt; recently I wanted to write a unit or integration test depending how you see it to assert against the Http Response.&lt;/p&gt;
&lt;p&gt;Doing this is no easy feat with MVC (with Nancy its all &lt;a href=&#34;https://github.com/NancyFx/Nancy/wiki/Testing-your-application&#34;&gt;done for you&lt;/a&gt;) and you have to mock a lot of things. Iâm hoping that in later releases this will be fixed because I know that ASP.Net Web API has made things a bit easier for testing (and wrote a testing library for it) so I assume the two projects will use bits of each other or their roadmap will merge.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Up &amp; Running with TypeScript and WebStorm</title>
      <link>https://blog.jonathanchannon.com/post/up-running-with-typescript-and-webstorm/</link>
      <pubDate>Wed, 17 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/up-running-with-typescript-and-webstorm/</guid>
      <description>&lt;p&gt;I love my iMac and Iâm on a mission to find a language I enjoy that I can use my Mac for (no Windows fan boy jokes please). Thereâs something in my mind I associate with work and my Windows laptop. Therefore, I donât feel to excited about getting my laptop out of my bag in the evenings/weekends to play with other stuff.&lt;/p&gt;
&lt;p&gt;As I want to broaden my knowledge I wanted to find something ideally statically typed (although Iâm currently looking into Python) that would work on OS X. Iâve said previously that JavaScript seems the way to go in my current situation so I thought Iâd take a look at TypeScript and also use &lt;a href=&#34;http://www.jetbrains.com/webstorm/&#34;&gt;WebStorm&lt;/a&gt; from Jetbrains as my IDE seeing as Iâve heard so many great things about them and their products (donât worry I use ReSharper).&lt;/p&gt;
&lt;h2 id=&#34;typescript&#34;&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;So I went over to TypeScriptâs &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;website&lt;/a&gt; and followed the Hello World type code examples under the âLearnâ tab.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using a Markdown ViewEngine with Nancy</title>
      <link>https://blog.jonathanchannon.com/post/using-a-markdown-viewengine-with-nancy/</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-a-markdown-viewengine-with-nancy/</guid>
      <description>&lt;p&gt;Whilst using &lt;a href=&#34;http://stackoverflow.com&#34;&gt;stackoverflow.com&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/&#34;&gt;Github gists&lt;/a&gt; Iâve become a frequent user of &lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those of you that donât know what Markdown is, its essentially a shorter/cleaner syntax that can be parsed to produce HTML. Below are a few examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#Hello World!
## You&#39;re awesome!
The quick brown fox jumped over the lazy coder
What the **hell** is this?
This is an [example link](http://example.com/)

&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;You&#39;re awesome!&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The quick brown fox jumped over the lazy coder&amp;lt;/p&amp;gt;
What the &amp;lt;strong&amp;gt;hell&amp;lt;/strong&amp;gt; is this?
This is an &amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt; example link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see more examples in the earlier link.&lt;/p&gt;
&lt;p&gt;When youâre writing a blog post or a lengthy page in your web app with lots of HTML it maybe easier to use Markdown as your preferred syntax. I currently use WordPress for my blog, itâs ok but its quite bloated for probably what I need. I looked into &lt;a href=&#34;http://calepin.co/&#34;&gt;Calepin&lt;/a&gt; and &lt;a href=&#34;http://scriptogr.am/&#34;&gt;Scriptogr.am&lt;/a&gt; as alternative blogging platforms but I felt it didnât quite offer what I wanted but the approach was a good idea. It meant you could write a blog post and simply put the file in dropbox and it would appear on your blog.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using DateTime in C# and SQL</title>
      <link>https://blog.jonathanchannon.com/post/using-datetime-in-c-and-sql/</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-datetime-in-c-and-sql/</guid>
      <description>&lt;p&gt;Iâm sure there are millions of blog posts out there that already discuss this but I think its worth noting down even if its just something for me to remember.&lt;/p&gt;
&lt;p&gt;Store your datetimes in UTC format into the database. Unfortunately this mean executing something like:
&lt;code&gt;myObject.ExpiryDate = TimeZoneInfo.ConvertTimeToUtc(dateTime, TimeZoneInfo.FindSystemTimeZoneById(âtimezoneid of usersâ)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In every central place where you update/insert DateTime values on your objects you will need the above.&lt;/p&gt;
&lt;p&gt;When you display any DateTime information it must display as a local datetime value. You can do this by using     &lt;code&gt;myObject.ExpiryDate.ToLocalTime()&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Old Development Language Switcheroo</title>
      <link>https://blog.jonathanchannon.com/post/the-old-development-language-switcheroo/</link>
      <pubDate>Tue, 02 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/the-old-development-language-switcheroo/</guid>
      <description>&lt;p&gt;As a C# developer I think Iâm pretty safe in saying that its not going away any time soon however, its my opinion that to not become irrelevant you need to have options. Some may argue that its better to be master of one than a Jack of all trades but lets just say you canât find your next job in the primary language you want to work in. What do you do?&lt;/p&gt;
&lt;p&gt;I have looked more into JavaScript recently and with that comes server and client scope for the use of the language so with some understanding of JS that would be probably the best bet for me however, as much as this may annoy some I think I actually prefer statically typed languages.&lt;/p&gt;
&lt;p&gt;Now I know there is &lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; that I could use for my &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; apps but I see that as more of a workaround and not a core feature of JavaScript. Iâm not saying anything bad against JS and the libraries/frameworks that I have used I like but I just find it easier to learn and know what I can do when I have decent intellisense showing me what I can do with my code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The many approaches to Entity Framework</title>
      <link>https://blog.jonathanchannon.com/post/the-many-approaches-to-entity-framework/</link>
      <pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/the-many-approaches-to-entity-framework/</guid>
      <description>&lt;p&gt;I recently had a need to look into using &lt;a href=&#34;http://www.asp.net/entity-framework&#34;&gt;Entity Framework (EF)&lt;/a&gt; for a &lt;a href=&#34;http://www.asp.net/mvc&#34;&gt;ASP.NET MVC&lt;/a&gt; project. In the past I have always used &lt;a href=&#34;http://www.toptensoftware.com/petapoco/&#34;&gt;PetaPoco&lt;/a&gt; as my ORM of choice and with hearing nothing but bad things about EF I was a little sceptical. There are various ways to use EF, Code First being one of them and the easiest from what I can gather and luckily the approach I needed to get up to speed on. This means you can define your model in code and EF will turn that into tables in your database.&lt;/p&gt;
&lt;p&gt;The way I was going to see how EF could be architected in an application was to create a MVC application that provided CRUD capabilities for Customers, Orders and Products. Nothing complicated but something enough to see how EF could be fitted in with a MVC application. I would also like to use a unit of work pattern such as instantiate a model class, set some properties and call a save method. I would also like to keep the architecture well enough abstracted so that another ORM could take its place easily enough if needs be.&lt;/p&gt;
&lt;p&gt;I will list the various approaches I took investigating the how EF could be integrated. They are not in any chronological order.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evaluating KnockoutJS and AngularJS â Part 1</title>
      <link>https://blog.jonathanchannon.com/post/evaluating-knockoutjs-and-angularjs-part-1/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/evaluating-knockoutjs-and-angularjs-part-1/</guid>
      <description>&lt;p&gt;As I stated in my earlier post &lt;a href=&#34;http://blog.jonathanchannon.com/2013/01/09/javascript-is-the-future-maybe/&#34; title=&#34;JavaScript is the futureâ¦maybe!&#34;&gt;âJavaScript is the futureâ¦maybeâ&lt;/a&gt; so with that in mind I had to brush up my JS skills and get more involved with the languageâs core concepts so after watching some videos and reading some articles I was ready to look at &lt;a href=&#34;http://knockoutjs.com&#34;&gt;KnockoutJS&lt;/a&gt; and &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before I actually looked at these two I spent some time with &lt;a href=&#34;http://sammyjs.org/&#34;&gt;SammyJS&lt;/a&gt; but realised afterwards it was mainly MVC based and not around 2-way binding that Knockout and Angular offer. However, I really liked it and it seemed very familiar and easy to use, the reason being it was inspired by &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; which we all know &lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; was also inspired by and we also know how much &lt;a href=&#34;http://nancyfx.org/mvm.html&#34;&gt;I like Nancy&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Getting to grips with any language or frameworks is tricky and the best way to do it is to write an application using it. The next difficult thing to overcome is an idea for writing an application. ToDo listâs are very common with JavaScript frameworks and there is a whole website for you to peruse but after looking at SammyJS and their docs they walk through writing a simple shopping basket so I thought Iâd use that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Evaluating KnockoutJS and AngularJS â Part 2</title>
      <link>https://blog.jonathanchannon.com/post/evaluating-knockoutjs-and-angularjs-part-2/</link>
      <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/evaluating-knockoutjs-and-angularjs-part-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://blog.jonathanchannon.com/2013/02/05/evaluating-knockoutjs-and-angularjs-part-1/&#34; title=&#34;Evaluating KnockoutJS and AngularJS â Part 1&#34;&gt;Part 1&lt;/a&gt;, I described how I was using the demo tutorial from &lt;a href=&#34;http://sammyjs.org/&#34;&gt;SammyJS&lt;/a&gt; to get a better understanding of &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;KnockoutJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this blog post I will focus on what I found when using KnockoutJS.&lt;/p&gt;
&lt;p&gt;Again if you just want to get to the code then feel free to take a look here for &lt;a href=&#34;https://github.com/jchannon/AngularShopping&#34;&gt;Angular&lt;/a&gt; and here for &lt;a href=&#34;https://github.com/jchannon/KnockoutShopping&#34;&gt;Knockout&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;knockout&#34;&gt;Knockout&lt;/h2&gt;
&lt;p&gt;Firstly Knockout should be commended on their documentation and online tutorials. Their website tutorials follows a step by step approach and once you have completed each step you can click through to the next section. You can also leave the tutorial and come back to it and it will remember where you left. There is great support in the KnockoutJS room in Jabbr and Iâd like to thank &lt;a href=&#34;https://twitter.com/davepermen&#34;&gt;David SpÃ¶rri&lt;/a&gt; for answering my newbie JS and Knockout questions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using AngularJS/BackboneJS in Windows 8 JavaScript app</title>
      <link>https://blog.jonathanchannon.com/post/using-angularjsbackbonejs-in-windows-8-javascript-app/</link>
      <pubDate>Thu, 24 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/using-angularjsbackbonejs-in-windows-8-javascript-app/</guid>
      <description>&lt;p&gt;To help me expand my JavaScript knowledge as I said I would in my &lt;a href=&#34;http://blog.jonathanchannon.com/2013/01/09/javascript-is-the-future-maybe/&#34; title=&#34;JavaScript is the futureâ¦maybe!&#34;&gt;previous post&lt;/a&gt; I thought Iâd write a Windows 8 application using JavaScript.&lt;/p&gt;
&lt;p&gt;After following a few âHello Worldâ tutorials from Microsoft I thought Iâd take a look at the ToDo list demos shown at &lt;a href=&#34;http://TodoMVC.com&#34;&gt;TodoMVC.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This website/Github repository takes the ToDo demo and implements it in all the various JS frameworks and libraries out there. As I said previously its a minefield.&lt;/p&gt;
&lt;p&gt;Anyhow, I thought Iâd start with Backbone, copy the files, add the references to WinJS and hit F5 and bingo. However, I got the below error:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.stack.imgur.com/DOQl1.png&#34; alt=&#34;Unhandled Exception&#34; title=&#34;Unhandled Exception&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript is the futureâ¦maybe!</title>
      <link>https://blog.jonathanchannon.com/post/javascript-is-the-future-maybe/</link>
      <pubDate>Wed, 09 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/javascript-is-the-future-maybe/</guid>
      <description>&lt;p&gt;Iâm not one for New Years resolutions but I thought it was time I looked at JavaScript more in depth.&lt;/p&gt;
&lt;p&gt;I looked at &lt;a href=&#34;http://blog.jonathanchannon.com/2012/10/08/node-js-express-hello-world-formula-1-style/&#34; title=&#34;Node.js, Express, Hello World Formula 1 Style&#34;&gt;Node.js a while back&lt;/a&gt; and found it very interesting and I probably need to go back to it. Over the last month or so there has been a large discussion about async in .Net frameworks and there appears to be a lot of misunderstanding about it (and lets leave it at that, I donât want to start another flame war) but the thing we can definitely say with &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, well JavaScript to be fair is that it is perfectly asynchronous and non-blocking.&lt;/p&gt;
&lt;p&gt;As a web developer I have used JavaScript from the early days of Response.Write moving onto frameworks such as &lt;a href=&#34;http://script.aculo.us/&#34;&gt;script.aculo.us&lt;/a&gt; and &lt;a href=&#34;http://mootools.net/&#34;&gt;MooTools&lt;/a&gt; and finally ending up with &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; which has come pretty much a standard these days so my JavaScript skills are not completely new.&lt;/p&gt;
&lt;p&gt;However, there has been a large push to use JS more and more for rich user friendly applications with things like &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;KnockoutJS&lt;/a&gt;, &lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt; and &lt;a href=&#34;http://backbonejs.org/&#34;&gt;BackboneJS&lt;/a&gt; on the client and Node.js on the server. Microsoft has even taken a prominent role in helping bring Node.js to a Windows environment as it started out on *nix based platforms. They have also started contributing to and including scripts in their Visual Studio project templates for jQuery.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why use NancyFX?</title>
      <link>https://blog.jonathanchannon.com/post/why-use-nancyfx/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/why-use-nancyfx/</guid>
      <description>&lt;p&gt;When a new project comes along why should you automatically choose ASP.NET MVC? Yes, its Microsoft based so you may have more of your peers fluent already in that architecture but is there an alternative, a better alternative?&lt;/p&gt;
&lt;p&gt;I believe so and its called &lt;a href=&#34;http://nancyfx.org/&#34;&gt;NancyFX&lt;/a&gt;. Your first reaction, what is so special about Nancy? I also believe youâll ask what is wrong with ASP.NET MVC but maybe you should look at it differently and ask what is right with Nancy?&lt;/p&gt;
&lt;h2 id=&#34;what-is-nancy&#34;&gt;What is Nancy?&lt;/h2&gt;
&lt;p&gt;Nancy is a lightweight framework for building websites / services without getting in your way. Itâs heavily inspired by a Ruby project called Sinatra, which happens to identify itself as not being a framework, since it doesnât include all the plumbing of things such as an ORM, lots of configuration, etc.&lt;/p&gt;
&lt;h2 id=&#34;does-it-implement-mvc&#34;&gt;Does it implement MVC?&lt;/h2&gt;
&lt;p&gt;Nancy does not force you to adhere to the model-view-controller pattern, or any other pattern. Itâs nothing more than a service endpoint responding to HTTP verbs. Making it ideal for building Websites, Web Services and APIs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Easily publish a NuGet package</title>
      <link>https://blog.jonathanchannon.com/post/easily-publish-a-nuget-package/</link>
      <pubDate>Fri, 07 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/easily-publish-a-nuget-package/</guid>
      <description>&lt;p&gt;I recently published &lt;a href=&#34;http://blog.jonathanchannon.com/2012/11/29/asp-net-web-api-testing/&#34; title=&#34;ASP.NET Web API Testing&#34;&gt;WebAPI.Testing&lt;/a&gt; on &lt;a href=&#34;http://nuget.org/packages/WebAPI.Testing&#34;&gt;Nuget&lt;/a&gt; but found it a bit tricky to build a package ready for NuGet.&lt;/p&gt;
&lt;p&gt;There is &lt;a href=&#34;http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package&#34;&gt;documentation &lt;/a&gt;about how to do it but I found it hard to follow so I thought Iâd document how I finally got my package ready.&lt;/p&gt;
&lt;p&gt;The easiest way I thought was to have something built into Visual Studio. I spoke to &lt;a href=&#34;https://twitter.com/davidfowl&#34;&gt;David Fowler&lt;/a&gt; and he told me you can edit your *.csproj file and add &lt;code&gt;&amp;lt;BuildPackage&amp;gt;true&amp;lt;/BuildPackage&amp;gt;&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;When you build your project a *.nupkg is created ready for publishing with NuGet.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET Web API Testing</title>
      <link>https://blog.jonathanchannon.com/post/asp-net-web-api-testing/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/asp-net-web-api-testing/</guid>
      <description>&lt;p&gt;As the need arose to implement some kind of Web Service/HTTP API I thought I would evaluate &lt;a href=&#34;http://nancyfx.org/&#34;&gt;NancyFX&lt;/a&gt;, &lt;a href=&#34;http://www.asp.net/web-api&#34;&gt;ASP.NET Web API&lt;/a&gt; and &lt;a href=&#34;http://www.servicestack.net/&#34;&gt;ServiceStack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Suffice to say all performed as expected and I was actually surprised to find that implementing ASP.NET Web API was easier than ServiceStack (I know that might be a bit of a statement to make to the ServiceStack followers, sorry). I found Nancy easiest to implement. The very simple API demos can be found on &lt;a href=&#34;http://github.com/jchannon&#34;&gt;my Github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When it came to testing ASP.NET Web API I found it to be wanting slightly in comparison to Nancy. With WebAPI I could make direct calls to the controller methods to make sure data was returned correctly and I could mock a repository and test that the methods in the repository were being called but there was nothing I could see to test the HTTP response I would get.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The For Loop is the devil in disguise</title>
      <link>https://blog.jonathanchannon.com/post/the-for-loop-is-the-devil-in-disguise/</link>
      <pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/the-for-loop-is-the-devil-in-disguise/</guid>
      <description>&lt;p&gt;I recently spoke to someone about the âforâ loop who opened my eyes to how unstructured the âforâ loop is.&lt;/p&gt;
&lt;p&gt;I have only ever used it in the traditional sense of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for(int i = 0; i &amp;lt; 10; i++)
{

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I looked into some more and thought Iâd show anybody else who may not have known about this innocent little thing in the C# language. It may exist in other languages but I am explicitly talking about C#.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (; ; )
{
  Console.WriteLine(&amp;quot;Hi&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some reason this compiles and executes! Who knew? Smarter people than me obviously. What do you expect it to output?&lt;/p&gt;
&lt;p&gt;The answer is it outputs âHiâ forever as there is nothing to determine when the loop should end however there is nothing to determine when it should start either.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.gitignore not working â fixed!</title>
      <link>https://blog.jonathanchannon.com/post/gitignore-not-working-fixed/</link>
      <pubDate>Sun, 18 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/gitignore-not-working-fixed/</guid>
      <description>&lt;p&gt;This happens to me too often and I always end up googling the answer so this post is probably more of a location I know I can come to find the answer, although by writing it down hopefully it may sink in that I should stop getting too excited on a new project.&lt;/p&gt;
&lt;h3 id=&#34;new-project-scenario&#34;&gt;New project scenario&lt;/h3&gt;
&lt;p&gt;Youâre all very excited about your new project and you think its about time you committed this to source control. Obviously youâre using &lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt; so you initialise a new repository and commit your files. You then setup a remote repository at &lt;a href=&#34;http://github.com&#34;&gt;Github&lt;/a&gt; and it asks you whether you want it create a .gitignore file â you do. So now you have a repository remotely and locally. Easiest thing to do is pull from the remote, setup your remote and push to it. The other scenario might be youâve committed locally and then realise you need to add a .gitignore file which you do and then commit.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Publishing to Windows Azure from Github</title>
      <link>https://blog.jonathanchannon.com/post/publishing-to-windows-azure-from-github/</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/publishing-to-windows-azure-from-github/</guid>
      <description>&lt;p&gt;Back in &lt;a href=&#34;http://weblogs.asp.net/scottgu/archive/2012/09/17/announcing-great-improvements-to-windows-azure-web-sites.aspx&#34;&gt;July 2012&lt;/a&gt; Microsoft announced improvements to Azure Web Sites. One of those improvements was to Git publishing so when you pushed changes to your Github repository Azure would automatically pick that up and deploy the project. I even mentioned it in my &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me/&#34; title=&#34;NancyFX, RavenDB, NerdDinner and Me&#34;&gt;DinnerParty blog post&lt;/a&gt; but have only just looked at implementing it.&lt;/p&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;As I said in my previous post Azure supported Git publishing but it was a two step process. You push to Github and then push to Azure and it gets deployed. If you already have Git setup on your Azure account there is nowhere in the dashboard that allows to you setup Github integration. I thought I was going to have reset my deployment credentials and set it all up again when I asked the question on &lt;a href=&#34;http://jabbr.net&#34;&gt;Jabbr&lt;/a&gt;. Luckily &lt;a href=&#34;http://twitter.com/davidfowl&#34;&gt;David Fowler&lt;/a&gt; was online. Why is that lucky? He wrote the Github integration feature of Azure.&lt;/p&gt;
&lt;p&gt;To setup your Azure account to enable Github integration you have to FTP into your Azure account and delete the deployment history by deleting all contents in the /site/deployments folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jonathanchannon.com/images/blogpostimages/deploymenthistory-620x604.png&#34; alt=&#34;Deployment History&#34; title=&#34;Deployment History&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Deployment History&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Simple .Net Twitter,Google,Facebook Authentication</title>
      <link>https://blog.jonathanchannon.com/post/simple-net-twittergooglefacebook-authentication/</link>
      <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/simple-net-twittergooglefacebook-authentication/</guid>
      <description>&lt;p&gt;Logging into websites is no longer a matter of typing in your username and password and clicking the login button. If you already have an account with the main social networks you can log into a site using your credentials from that website saving you having to register your details &lt;em&gt;again&lt;/em&gt;. This obviously makes things a bit easier as you donât have to remember another password. (Although you should all be using a password manager such as &lt;a href=&#34;http://www.lastpass.com&#34;&gt;LastPass&lt;/a&gt;.)&lt;/p&gt;
&lt;h2 id=&#34;current-social-login-providers&#34;&gt;Current Social Login Providers&lt;/h2&gt;
&lt;p&gt;There are currently providers out there that allow you to use their services to integrate into your website to provide authentication via the social networks. The main two that I know of are &lt;a href=&#34;http://janrain.com&#34;&gt;Janrain&lt;/a&gt; and &lt;a href=&#34;http://www.dotnetopenauth.net/&#34;&gt;DotNetOpenAuth&lt;/a&gt;. Iâve not worked with DotNetOpenAuth but I have with Janrain when building &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me/&#34;&gt;DinnerParty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The process was reasonably easy but not as simple as it could be.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing your applicationâs email logic</title>
      <link>https://blog.jonathanchannon.com/post/testing-your-applications-email-logic/</link>
      <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/testing-your-applications-email-logic/</guid>
      <description>&lt;p&gt;If youâve ever written an application that sends out email you may have written the code and executed it numerous times to check that the logic works and that the email appears as you hope. This obviously means you have to hit your SMTP server each time, open your email client and check your emails each time.&lt;/p&gt;
&lt;h3 id=&#34;papercut&#34;&gt;Papercut&lt;/h3&gt;
&lt;p&gt;Reading through my Twitter timeline I saw &lt;a href=&#34;http://twitter.com/TheCodeJunkie&#34;&gt;@TheCodeJunkie&lt;/a&gt; asking about the app that you can use to test sending emails from your application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.jonathanchannon.com/images/blogpostimages/tweet.png&#34; alt=&#34;TheCodeJunkie Tweet&#34;&gt;&lt;/p&gt;
&lt;p&gt;Intrigued, I kept an eye on my timeline and found that the application in question was &lt;a href=&#34;http://papercut.codeplex.com/&#34;&gt;Papercut&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js, Express, Hello World Formula 1 Style</title>
      <link>https://blog.jonathanchannon.com/post/node-js-express-hello-world-formula-1-style/</link>
      <pubDate>Mon, 08 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/node-js-express-hello-world-formula-1-style/</guid>
      <description>&lt;p&gt;In my ongoing efforts to be a better developer (plus I just like tinkering) I thought I would take a look at &lt;a href=&#34;http://nodejs.org&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did play with node.js about a year ago where I setup a TCP listener to listen to a TCP Server on the network broadcasting XML messages, I then took these, formatted them to JSON and passed it to a browser using &lt;a href=&#34;http://socket.io/&#34;&gt;Socket.IO&lt;/a&gt;. It was pretty cool but the project never came to anything.&lt;/p&gt;
&lt;p&gt;However, I thought I would re-visit and setup a proper development environment on my Mac at home.&lt;/p&gt;
&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;
&lt;p&gt;There are many editors/IDEâs that you can use for node.js development such as Vim, Eclipse, WebStorm, Aptana Studio, Emacs and Cloud9 IDE.  As I have used &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;Sublime Text 2&lt;/a&gt; (ST2) before I thought I would use this because I like it and all the cool kids use it!!&lt;/p&gt;
&lt;p&gt;Coming from a mainly IDE based background I started to find things a bit hard going however ST2 allows plugins to be used to make the user experience a lot nicer.  Below are a list of plugins I have installed:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Abstracting the File System</title>
      <link>https://blog.jonathanchannon.com/post/abstracting-the-file-system/</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/abstracting-the-file-system/</guid>
      <description>&lt;p&gt;Following on from my post about &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/25/is-oss-good-for-your-career/&#34;&gt;OSS&lt;/a&gt; I thought I would illustrate how cool OSS can be.&lt;/p&gt;
&lt;p&gt;The day before that post was published I was working on a program that required the file system. All you good developers are going to know that the file system is a dependency and dependencies are bad and this post will probably be a bit like preaching to the choir however I thought it was worth posting.&lt;/p&gt;
&lt;p&gt;So you have a a method similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void DoSomethingCool()
{
  //do some stuff now write to file

  FileInfo f = new FileInfo(&amp;quot;C:\Mytext.txt&amp;quot;)
  using(StreamWriter w = f.CreateText())
  {
    w.WriteLine(&amp;quot;This blog post is cool&amp;quot;);
    w.Close();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are writing to a file to record something and need to test your method. Remember, unit tests are supposed to be fast. Typically anything that writes to a database or a file system will be slow however, we also have the problem that our method is now dependent on the file system and dependencies are bad. Wouldnât it be handy if we could make FileInfo a representation of an interface.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Is OSS good for your career?</title>
      <link>https://blog.jonathanchannon.com/post/is-oss-good-for-your-career/</link>
      <pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/is-oss-good-for-your-career/</guid>
      <description>&lt;p&gt;Got your attention? Good.&lt;/p&gt;
&lt;p&gt;Let me start by pointing out there are many opinions about the answer to this question. You will have yours and I have mine, thatâs called freedom of speech. I would like to hear your opinions so leave it in the comments.&lt;/p&gt;
&lt;p&gt;Let me explain that I have had 4 jobs in the last 10-11 years. 3 of those were via recruitment agents. They check your skills, tick them off and pass you over to the employer if they match and hopefully you get an interview. That process has happened to me in each of those 3 times.&lt;/p&gt;
&lt;p&gt;If you have read my previous blog posts youâll know I have spent the last year reading a lot of other peoples code and learning all the best practices I can in a bid to become a better software developer as well as give back to the developer community where I can.&lt;/p&gt;
&lt;p&gt;After spending a couple of months porting &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me&#34;&gt;NerdDinner over to NancyFX&lt;/a&gt; I realised that I had not looked at &lt;a href=&#34;http://www.asp.net/mvc&#34;&gt;ASP.Net MVC 4&lt;/a&gt; and the new features built into it. I felt slightly strange at that point as I was usually an early adopter of these things keen to check out the new stuff. I think this was partly due to the fact I had spent a lot of time learning &lt;a href=&#34;http://www.nancyfx.org&#34;&gt;NancyFX&lt;/a&gt; and really quite enjoying the framework and interacting with the small community of people who use Nancy.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NancyFX, RavenDB, NerdDinner and Me</title>
      <link>https://blog.jonathanchannon.com/post/nancyfx-ravendb-nerddinner-and-me/</link>
      <pubDate>Fri, 21 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/nancyfx-ravendb-nerddinner-and-me/</guid>
      <description>&lt;p&gt;As I said in my &lt;a href=&#34;http://blog.jonathanchannon.com/2012/09/17/ive-started-blogging-why/&#34; title=&#34;Iâve started blogging. Why?&#34;&gt;first post&lt;/a&gt;, NancyFX was my first port of call in my OSS adventure.  The reason I had come across it was by following &lt;a href=&#34;http://twitter.com/squidge&#34;&gt;@squidge&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/cranialstrain&#34;&gt;@cranialstrain&lt;/a&gt; on Twitter.  At the time they were talking about it quite a bit so I thought Iâd take a look.  I was also keeping track of lots of people talking about &lt;a href=&#34;http://ravendb.net&#34;&gt;RavenDB&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-is-nancyfx&#34;&gt;What is NancyFX?&lt;/h3&gt;
&lt;p&gt;From the official docs this explains NancyFX:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This means that everything in Nancy is setup to have sensible defaults and conventions, instead of making you jump through hoops and go through configuration hell just to get up and running. With Nancy you can go from zero to website in a matter of minutes. Literally.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Iâve started blogging. Why?</title>
      <link>https://blog.jonathanchannon.com/post/ive-started-blogging-why/</link>
      <pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/ive-started-blogging-why/</guid>
      <description>&lt;p&gt;So here I am, Jonathan Channon, blogger.  I never saw the point of blogging before so why now?&lt;/p&gt;
&lt;p&gt;I have read and spoken to many people regarding blogging who were all in favour of it.  I would always argue that I donât have time, I have nothing to blog about or Iâm not that insane to start blogging about stuff I barely understand just so the masses can come and hurl abuse at my ignorance.  However I recently read an &lt;a href=&#34;http://buildstarted.com/2012/08/28/how-i-learned-to-stop-worrying-and-love-my-community/&#34;&gt;article&lt;/a&gt; by &lt;a href=&#34;http://twitter.com/buildstarted&#34;&gt;Ben Dornis&lt;/a&gt; titled âHow I learned to stop worrying and love my communityâ.  He outlined all the reasons why a lot of people donât publish their code and donât publish their thoughts online. I thought he was being modest, the man is clearly talented at what he does so he didnât have to worry however, someone like me still had these fears.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://blog.jonathanchannon.com/post/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.jonathanchannon.com/post/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
